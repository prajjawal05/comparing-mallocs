<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>larson-sized (9,999,999,900 samples, 70.82%)</title><rect x="11.7" y="437" width="835.6" height="15.0" fill="rgb(238,128,38)" rx="2" ry="2" />
<text  x="14.69" y="447.5" >larson-sized</text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (20,202,020 samples, 0.14%)</title><rect x="584.8" y="341" width="1.7" height="15.0" fill="rgb(244,85,52)" rx="2" ry="2" />
<text  x="587.81" y="351.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::SampleRecorder&lt;tcmalloc::tcmalloc_internal::SampledAllocation, tcmalloc::tcmalloc_internal::SampledAllocationAllocator&gt;::Register&lt;tcmalloc::tcmalloc_internal::StackTrace&gt; (10,101,010 samples, 0.07%)</title><rect x="746.0" y="373" width="0.9" height="15.0" fill="rgb(219,71,18)" rx="2" ry="2" />
<text  x="749.02" y="383.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="261" width="169.7" height="15.0" fill="rgb(226,165,53)" rx="2" ry="2" />
<text  x="1022.50" y="271.5" >__cpuidle_text_start</text>
</g>
<g >
<title>tasklet_action_common.isra.0 (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="229" width="0.8" height="15.0" fill="rgb(235,147,50)" rx="2" ry="2" />
<text  x="1021.66" y="239.5" ></text>
</g>
<g >
<title>lookup_fast (10,101,010 samples, 0.07%)</title><rect x="849.0" y="245" width="0.8" height="15.0" fill="rgb(220,61,42)" rx="2" ry="2" />
<text  x="852.00" y="255.5" ></text>
</g>
<g >
<title>_dl_addr (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="421" width="0.8" height="15.0" fill="rgb(248,184,49)" rx="2" ry="2" />
<text  x="1192.16" y="431.5" ></text>
</g>
<g >
<title>__open64 (20,202,020 samples, 0.14%)</title><rect x="848.2" y="405" width="1.6" height="15.0" fill="rgb(239,42,19)" rx="2" ry="2" />
<text  x="851.15" y="415.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (10,101,010 samples, 0.07%)</title><rect x="532.5" y="373" width="0.8" height="15.0" fill="rgb(219,130,1)" rx="2" ry="2" />
<text  x="535.47" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (10,101,010 samples, 0.07%)</title><rect x="843.9" y="405" width="0.9" height="15.0" fill="rgb(225,33,23)" rx="2" ry="2" />
<text  x="846.93" y="415.5" ></text>
</g>
<g >
<title>pid_revalidate (10,101,010 samples, 0.07%)</title><rect x="849.0" y="229" width="0.8" height="15.0" fill="rgb(246,154,40)" rx="2" ry="2" />
<text  x="852.00" y="239.5" ></text>
</g>
<g >
<title>slow_alloc&lt;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;, decltype (30,303,030 samples, 0.21%)</title><rect x="745.2" y="405" width="2.5" height="15.0" fill="rgb(231,12,26)" rx="2" ry="2" />
<text  x="748.18" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.07%)</title><rect x="843.9" y="309" width="0.9" height="15.0" fill="rgb(228,159,20)" rx="2" ry="2" />
<text  x="846.93" y="319.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (10,101,010 samples, 0.07%)</title><rect x="518.1" y="373" width="0.9" height="15.0" fill="rgb(215,183,36)" rx="2" ry="2" />
<text  x="521.13" y="383.5" ></text>
</g>
<g >
<title>TCMallocInternalNewArray (191,919,190 samples, 1.36%)</title><rect x="34.5" y="421" width="16.0" height="15.0" fill="rgb(226,20,17)" rx="2" ry="2" />
<text  x="37.48" y="431.5" ></text>
</g>
<g >
<title>__mbrtowc (10,101,010 samples, 0.07%)</title><rect x="10.0" y="405" width="0.8" height="15.0" fill="rgb(240,128,45)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>__do_huge_pmd_anonymous_page (10,101,010 samples, 0.07%)</title><rect x="843.9" y="245" width="0.9" height="15.0" fill="rgb(239,60,5)" rx="2" ry="2" />
<text  x="846.93" y="255.5" ></text>
</g>
<g >
<title>default_idle_call (2,030,303,010 samples, 14.38%)</title><rect x="849.8" y="357" width="169.7" height="15.0" fill="rgb(225,135,30)" rx="2" ry="2" />
<text  x="852.84" y="367.5" >default_idle_call</text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.07%)</title><rect x="843.9" y="277" width="0.9" height="15.0" fill="rgb(251,107,26)" rx="2" ry="2" />
<text  x="846.93" y="287.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (20,202,020 samples, 0.14%)</title><rect x="743.5" y="405" width="1.7" height="15.0" fill="rgb(249,183,7)" rx="2" ry="2" />
<text  x="746.49" y="415.5" ></text>
</g>
<g >
<title>runthreads (20,202,020 samples, 0.14%)</title><rect x="843.1" y="421" width="1.7" height="15.0" fill="rgb(216,18,51)" rx="2" ry="2" />
<text  x="846.09" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (20,202,020 samples, 0.14%)</title><rect x="533.3" y="373" width="1.7" height="15.0" fill="rgb(221,141,9)" rx="2" ry="2" />
<text  x="536.32" y="383.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="71.6" y="421" width="0.9" height="15.0" fill="rgb(227,166,23)" rx="2" ry="2" />
<text  x="74.62" y="431.5" ></text>
</g>
<g >
<title>scsi_mq_done (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="181" width="0.8" height="15.0" fill="rgb(242,121,27)" rx="2" ry="2" />
<text  x="1021.66" y="191.5" ></text>
</g>
<g >
<title>pid_update_inode (10,101,010 samples, 0.07%)</title><rect x="849.0" y="213" width="0.8" height="15.0" fill="rgb(240,112,10)" rx="2" ry="2" />
<text  x="852.00" y="223.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (10,101,010 samples, 0.07%)</title><rect x="584.0" y="341" width="0.8" height="15.0" fill="rgb(205,188,42)" rx="2" ry="2" />
<text  x="586.96" y="351.5" ></text>
</g>
<g >
<title>TcmallocSlab_Internal_PopBatch (151,515,150 samples, 1.07%)</title><rect x="573.8" y="357" width="12.7" height="15.0" fill="rgb(248,85,33)" rx="2" ry="2" />
<text  x="576.83" y="367.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="405" width="169.7" height="15.0" fill="rgb(239,50,52)" rx="2" ry="2" />
<text  x="1022.50" y="415.5" >x86_64_start_kernel</text>
</g>
<g >
<title>TCMallocInternalDeleteArraySized (2,494,949,470 samples, 17.67%)</title><rect x="399.1" y="405" width="208.5" height="15.0" fill="rgb(229,228,52)" rx="2" ry="2" />
<text  x="402.11" y="415.5" >TCMallocInternalDeleteArray..</text>
</g>
<g >
<title>do_syscall_64 (20,202,020 samples, 0.14%)</title><rect x="848.2" y="373" width="1.6" height="15.0" fill="rgb(222,167,3)" rx="2" ry="2" />
<text  x="851.15" y="383.5" ></text>
</g>
<g >
<title>security_task_getsecid_subj (10,101,010 samples, 0.07%)</title><rect x="848.2" y="245" width="0.8" height="15.0" fill="rgb(222,229,29)" rx="2" ry="2" />
<text  x="851.15" y="255.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (10,101,010 samples, 0.07%)</title><rect x="847.3" y="405" width="0.9" height="15.0" fill="rgb(251,76,54)" rx="2" ry="2" />
<text  x="850.31" y="415.5" ></text>
</g>
<g >
<title>asm_sysvec_hyperv_callback (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="309" width="0.8" height="15.0" fill="rgb(220,117,31)" rx="2" ry="2" />
<text  x="1021.66" y="319.5" ></text>
</g>
<g >
<title>do_idle (2,030,303,010 samples, 14.38%)</title><rect x="849.8" y="373" width="169.7" height="15.0" fill="rgb(242,101,34)" rx="2" ry="2" />
<text  x="852.84" y="383.5" >do_idle</text>
</g>
<g >
<title>[libtcmalloc.so] (40,404,040 samples, 0.29%)</title><rect x="813.5" y="357" width="3.4" height="15.0" fill="rgb(228,54,41)" rx="2" ry="2" />
<text  x="816.55" y="367.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (10,101,010 samples, 0.07%)</title><rect x="843.9" y="341" width="0.9" height="15.0" fill="rgb(244,206,1)" rx="2" ry="2" />
<text  x="846.93" y="351.5" ></text>
</g>
<g >
<title>exercise_heap (9,222,222,130 samples, 65.31%)</title><rect x="72.5" y="421" width="770.6" height="15.0" fill="rgb(251,164,43)" rx="2" ry="2" />
<text  x="75.46" y="431.5" >exercise_heap</text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="277" width="0.8" height="15.0" fill="rgb(217,205,52)" rx="2" ry="2" />
<text  x="1021.66" y="287.5" ></text>
</g>
<g >
<title>default_idle_call (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="293" width="169.7" height="15.0" fill="rgb(235,90,11)" rx="2" ry="2" />
<text  x="1022.50" y="303.5" >default_idle_call</text>
</g>
<g >
<title>sysvec_hyperv_callback (10,101,010 samples, 0.07%)</title><rect x="742.6" y="373" width="0.9" height="15.0" fill="rgb(251,150,33)" rx="2" ry="2" />
<text  x="745.65" y="383.5" ></text>
</g>
<g >
<title>path_openat (20,202,020 samples, 0.14%)</title><rect x="848.2" y="293" width="1.6" height="15.0" fill="rgb(230,17,51)" rx="2" ry="2" />
<text  x="851.15" y="303.5" ></text>
</g>
<g >
<title>tasklet_action (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="245" width="0.8" height="15.0" fill="rgb(239,25,48)" rx="2" ry="2" />
<text  x="1021.66" y="255.5" ></text>
</g>
<g >
<title>redis-server (30,303,030 samples, 0.21%)</title><rect x="847.3" y="437" width="2.5" height="15.0" fill="rgb(206,43,21)" rx="2" ry="2" />
<text  x="850.31" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::Sampler::RecordAllocationSlow (10,101,010 samples, 0.07%)</title><rect x="746.9" y="389" width="0.8" height="15.0" fill="rgb(230,125,16)" rx="2" ry="2" />
<text  x="749.87" y="399.5" ></text>
</g>
<g >
<title>all (14,121,211,980 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(207,178,37)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2,030,303,010 samples, 14.38%)</title><rect x="849.8" y="389" width="169.7" height="15.0" fill="rgb(212,198,38)" rx="2" ry="2" />
<text  x="852.84" y="399.5" >cpu_startup_entry</text>
</g>
<g >
<title>TCMallocInternalDeleteArraySized (10,101,010 samples, 0.07%)</title><rect x="71.6" y="389" width="0.9" height="15.0" fill="rgb(234,187,43)" rx="2" ry="2" />
<text  x="74.62" y="399.5" ></text>
</g>
<g >
<title>start_secondary (2,030,303,010 samples, 14.38%)</title><rect x="849.8" y="405" width="169.7" height="15.0" fill="rgb(210,173,8)" rx="2" ry="2" />
<text  x="852.84" y="415.5" >start_secondary</text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (40,404,040 samples, 0.29%)</title><rect x="816.9" y="357" width="3.4" height="15.0" fill="rgb(244,40,22)" rx="2" ry="2" />
<text  x="819.92" y="367.5" ></text>
</g>
<g >
<title>scsi_io_completion (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="117" width="0.8" height="15.0" fill="rgb(247,158,38)" rx="2" ry="2" />
<text  x="1021.66" y="127.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::UpdateCapacity (222,222,220 samples, 1.57%)</title><rect x="586.5" y="357" width="18.6" height="15.0" fill="rgb(245,105,20)" rx="2" ry="2" />
<text  x="589.49" y="367.5" ></text>
</g>
<g >
<title>bench.sh (20,202,020 samples, 0.14%)</title><rect x="10.0" y="437" width="1.7" height="15.0" fill="rgb(253,200,30)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>storvsc_on_channel_callback (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="197" width="0.8" height="15.0" fill="rgb(230,93,24)" rx="2" ry="2" />
<text  x="1021.66" y="207.5" ></text>
</g>
<g >
<title>[unknown] (30,303,030 samples, 0.21%)</title><rect x="847.3" y="421" width="2.5" height="15.0" fill="rgb(252,50,8)" rx="2" ry="2" />
<text  x="850.31" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::SampleifyAllocation&lt;tcmalloc::tcmalloc_internal::Static, tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::NullOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt; &gt; (20,202,020 samples, 0.14%)</title><rect x="745.2" y="389" width="1.7" height="15.0" fill="rgb(245,103,14)" rx="2" ry="2" />
<text  x="748.18" y="399.5" ></text>
</g>
<g >
<title>bio_endio (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="69" width="0.8" height="15.0" fill="rgb(226,97,18)" rx="2" ry="2" />
<text  x="1021.66" y="79.5" ></text>
</g>
<g >
<title>time (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="437" width="0.8" height="15.0" fill="rgb(245,25,22)" rx="2" ry="2" />
<text  x="1192.16" y="447.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (858,585,850 samples, 6.08%)</title><rect x="535.0" y="373" width="71.8" height="15.0" fill="rgb(210,136,42)" rx="2" ry="2" />
<text  x="538.01" y="383.5" >tcmalloc..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,202,020 samples, 0.14%)</title><rect x="848.2" y="389" width="1.6" height="15.0" fill="rgb(209,39,48)" rx="2" ry="2" />
<text  x="851.15" y="399.5" ></text>
</g>
<g >
<title>do_huge_pmd_anonymous_page (10,101,010 samples, 0.07%)</title><rect x="843.9" y="261" width="0.9" height="15.0" fill="rgb(244,2,33)" rx="2" ry="2" />
<text  x="846.93" y="271.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="37" width="0.8" height="15.0" fill="rgb(230,188,28)" rx="2" ry="2" />
<text  x="1021.66" y="47.5" ></text>
</g>
<g >
<title>link_path_walk.part.0 (10,101,010 samples, 0.07%)</title><rect x="849.0" y="277" width="0.8" height="15.0" fill="rgb(233,87,37)" rx="2" ry="2" />
<text  x="852.00" y="287.5" ></text>
</g>
<g >
<title>command_substitute (10,101,010 samples, 0.07%)</title><rect x="10.8" y="421" width="0.9" height="15.0" fill="rgb(235,219,52)" rx="2" ry="2" />
<text  x="13.84" y="431.5" ></text>
</g>
<g >
<title>TCMallocInternalNewArray (10,101,010 samples, 0.07%)</title><rect x="843.1" y="405" width="0.8" height="15.0" fill="rgb(205,194,44)" rx="2" ry="2" />
<text  x="846.09" y="415.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (1,060,606,050 samples, 7.51%)</title><rect x="519.0" y="389" width="88.6" height="15.0" fill="rgb(236,69,20)" rx="2" ry="2" />
<text  x="521.97" y="399.5" >tcmalloc::..</text>
</g>
<g >
<title>TcmallocSlab_Internal_PopBatch (10,101,010 samples, 0.07%)</title><rect x="531.6" y="373" width="0.9" height="15.0" fill="rgb(244,64,8)" rx="2" ry="2" />
<text  x="534.63" y="383.5" ></text>
</g>
<g >
<title>log2@@GLIBC_2.29 (10,101,010 samples, 0.07%)</title><rect x="746.9" y="373" width="0.8" height="15.0" fill="rgb(226,177,38)" rx="2" ry="2" />
<text  x="749.87" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (949,494,940 samples, 6.72%)</title><rect x="762.1" y="389" width="79.3" height="15.0" fill="rgb(216,23,21)" rx="2" ry="2" />
<text  x="765.06" y="399.5" >tcmalloc:..</text>
</g>
<g >
<title>clear_huge_page (10,101,010 samples, 0.07%)</title><rect x="843.9" y="229" width="0.9" height="15.0" fill="rgb(213,53,15)" rx="2" ry="2" />
<text  x="846.93" y="239.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (20,202,020 samples, 0.14%)</title><rect x="605.1" y="357" width="1.7" height="15.0" fill="rgb(215,57,31)" rx="2" ry="2" />
<text  x="608.06" y="367.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (4,060,606,020 samples, 28.76%)</title><rect x="849.8" y="421" width="339.4" height="15.0" fill="rgb(227,141,22)" rx="2" ry="2" />
<text  x="852.84" y="431.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>ext4_end_bio (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="53" width="0.8" height="15.0" fill="rgb(223,181,32)" rx="2" ry="2" />
<text  x="1021.66" y="63.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (20,202,020 samples, 0.14%)</title><rect x="839.7" y="373" width="1.7" height="15.0" fill="rgb(248,78,54)" rx="2" ry="2" />
<text  x="842.71" y="383.5" ></text>
</g>
<g >
<title>scsi_finish_command (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="133" width="0.8" height="15.0" fill="rgb(227,70,48)" rx="2" ry="2" />
<text  x="1021.66" y="143.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.07%)</title><rect x="843.9" y="293" width="0.9" height="15.0" fill="rgb(242,109,42)" rx="2" ry="2" />
<text  x="846.93" y="303.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.07%)</title><rect x="742.6" y="341" width="0.9" height="15.0" fill="rgb(214,170,27)" rx="2" ry="2" />
<text  x="745.65" y="351.5" ></text>
</g>
<g >
<title>sysvec_hyperv_callback (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="293" width="0.8" height="15.0" fill="rgb(229,100,2)" rx="2" ry="2" />
<text  x="1021.66" y="303.5" ></text>
</g>
<g >
<title>do_open.isra.0 (10,101,010 samples, 0.07%)</title><rect x="848.2" y="277" width="0.8" height="15.0" fill="rgb(215,182,54)" rx="2" ry="2" />
<text  x="851.15" y="287.5" ></text>
</g>
<g >
<title>rest_init (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="341" width="169.7" height="15.0" fill="rgb(210,44,40)" rx="2" ry="2" />
<text  x="1022.50" y="351.5" >rest_init</text>
</g>
<g >
<title>exc_page_fault (10,101,010 samples, 0.07%)</title><rect x="843.9" y="325" width="0.9" height="15.0" fill="rgb(237,108,50)" rx="2" ry="2" />
<text  x="846.93" y="335.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::UpdateCapacity (212,121,210 samples, 1.50%)</title><rect x="822.0" y="373" width="17.7" height="15.0" fill="rgb(219,213,11)" rx="2" ry="2" />
<text  x="824.99" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (1,121,212,110 samples, 7.94%)</title><rect x="747.7" y="405" width="93.7" height="15.0" fill="rgb(206,197,24)" rx="2" ry="2" />
<text  x="750.71" y="415.5" >tcmalloc::t..</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::central_freelist_internal::CentralFreeList&lt;tcmalloc::tcmalloc_internal::central_freelist_internal::StaticForwarder&gt;::RemoveRange (10,101,010 samples, 0.07%)</title><rect x="843.9" y="373" width="0.9" height="15.0" fill="rgb(216,141,47)" rx="2" ry="2" />
<text  x="846.93" y="383.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::UpdateCapacity (10,101,010 samples, 0.07%)</title><rect x="606.8" y="373" width="0.8" height="15.0" fill="rgb(234,179,17)" rx="2" ry="2" />
<text  x="609.75" y="383.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArraySized (272,727,270 samples, 1.93%)</title><rect x="11.7" y="421" width="22.8" height="15.0" fill="rgb(233,126,43)" rx="2" ry="2" />
<text  x="14.69" y="431.5" >T..</text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.07%)</title><rect x="843.9" y="213" width="0.9" height="15.0" fill="rgb(234,186,27)" rx="2" ry="2" />
<text  x="846.93" y="223.5" ></text>
</g>
<g >
<title>blk_mq_complete_request (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="165" width="0.8" height="15.0" fill="rgb(230,219,1)" rx="2" ry="2" />
<text  x="1021.66" y="175.5" ></text>
</g>
<g >
<title>do_sys_open (20,202,020 samples, 0.14%)</title><rect x="848.2" y="341" width="1.6" height="15.0" fill="rgb(232,120,54)" rx="2" ry="2" />
<text  x="851.15" y="351.5" ></text>
</g>
<g >
<title>ima_file_check (10,101,010 samples, 0.07%)</title><rect x="848.2" y="261" width="0.8" height="15.0" fill="rgb(217,206,3)" rx="2" ry="2" />
<text  x="851.15" y="271.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="325" width="169.7" height="15.0" fill="rgb(216,118,11)" rx="2" ry="2" />
<text  x="1022.50" y="335.5" >cpu_startup_entry</text>
</g>
<g >
<title>asm_sysvec_hyperv_callback (10,101,010 samples, 0.07%)</title><rect x="742.6" y="389" width="0.9" height="15.0" fill="rgb(251,97,41)" rx="2" ry="2" />
<text  x="745.65" y="399.5" ></text>
</g>
<g >
<title>arch_cpu_idle (2,030,303,010 samples, 14.38%)</title><rect x="849.8" y="341" width="169.7" height="15.0" fill="rgb(232,166,0)" rx="2" ry="2" />
<text  x="852.84" y="351.5" >arch_cpu_idle</text>
</g>
<g >
<title>absl::base_internal::SpinLock::SlowLock (10,101,010 samples, 0.07%)</title><rect x="820.3" y="373" width="0.8" height="15.0" fill="rgb(212,214,5)" rx="2" ry="2" />
<text  x="823.30" y="383.5" ></text>
</g>
<g >
<title>absl::Now (10,101,010 samples, 0.07%)</title><rect x="745.2" y="373" width="0.8" height="15.0" fill="rgb(238,59,1)" rx="2" ry="2" />
<text  x="748.18" y="383.5" ></text>
</g>
<g >
<title>absl::base_internal::SpinLock::SpinLoop (10,101,010 samples, 0.07%)</title><rect x="821.1" y="373" width="0.9" height="15.0" fill="rgb(206,90,23)" rx="2" ry="2" />
<text  x="824.14" y="383.5" ></text>
</g>
<g >
<title>vmbus_on_event (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="213" width="0.8" height="15.0" fill="rgb(239,7,31)" rx="2" ry="2" />
<text  x="1021.66" y="223.5" ></text>
</g>
<g >
<title>swapper (4,060,606,020 samples, 28.76%)</title><rect x="849.8" y="437" width="339.4" height="15.0" fill="rgb(252,27,40)" rx="2" ry="2" />
<text  x="852.84" y="447.5" >swapper</text>
</g>
<g >
<title>__cpuidle_text_start (2,030,303,010 samples, 14.38%)</title><rect x="849.8" y="325" width="169.7" height="15.0" fill="rgb(240,97,39)" rx="2" ry="2" />
<text  x="852.84" y="335.5" >__cpuidle_text_start</text>
</g>
<g >
<title>TcmallocSlab_Internal_PushBatch (161,616,160 samples, 1.14%)</title><rect x="806.8" y="373" width="13.5" height="15.0" fill="rgb(211,39,33)" rx="2" ry="2" />
<text  x="809.80" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="261" width="0.8" height="15.0" fill="rgb(227,118,52)" rx="2" ry="2" />
<text  x="1021.66" y="271.5" ></text>
</g>
<g >
<title>walk_component (10,101,010 samples, 0.07%)</title><rect x="849.0" y="261" width="0.8" height="15.0" fill="rgb(221,117,33)" rx="2" ry="2" />
<text  x="852.00" y="271.5" ></text>
</g>
<g >
<title>do_filp_open (20,202,020 samples, 0.14%)</title><rect x="848.2" y="309" width="1.6" height="15.0" fill="rgb(254,160,21)" rx="2" ry="2" />
<text  x="851.15" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (10,101,010 samples, 0.07%)</title><rect x="841.4" y="405" width="0.8" height="15.0" fill="rgb(253,8,43)" rx="2" ry="2" />
<text  x="844.40" y="415.5" ></text>
</g>
<g >
<title>scsi_complete (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="149" width="0.8" height="15.0" fill="rgb(229,103,27)" rx="2" ry="2" />
<text  x="1021.66" y="159.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (30,303,030 samples, 0.21%)</title><rect x="844.8" y="421" width="2.5" height="15.0" fill="rgb(240,14,34)" rx="2" ry="2" />
<text  x="847.78" y="431.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.07%)</title><rect x="742.6" y="357" width="0.9" height="15.0" fill="rgb(240,58,28)" rx="2" ry="2" />
<text  x="745.65" y="367.5" ></text>
</g>
<g >
<title>arch_call_rest_init (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="357" width="169.7" height="15.0" fill="rgb(240,39,0)" rx="2" ry="2" />
<text  x="1022.50" y="367.5" >arch_call_rest_init</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (10,101,010 samples, 0.07%)</title><rect x="843.9" y="389" width="0.9" height="15.0" fill="rgb(254,184,4)" rx="2" ry="2" />
<text  x="846.93" y="399.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (30,303,030 samples, 0.21%)</title><rect x="757.8" y="389" width="2.6" height="15.0" fill="rgb(250,126,17)" rx="2" ry="2" />
<text  x="760.84" y="399.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::invoke_delete_hooks_and_free&lt;&amp;tcmalloc::tcmalloc_internal::(anonymous namespace)::do_free_pages,  (10,101,010 samples, 0.07%)</title><rect x="842.2" y="405" width="0.9" height="15.0" fill="rgb(211,127,1)" rx="2" ry="2" />
<text  x="845.25" y="415.5" ></text>
</g>
<g >
<title>task_dump_owner (10,101,010 samples, 0.07%)</title><rect x="849.0" y="197" width="0.8" height="15.0" fill="rgb(233,99,31)" rx="2" ry="2" />
<text  x="852.00" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (20,202,020 samples, 0.14%)</title><rect x="760.4" y="389" width="1.7" height="15.0" fill="rgb(231,87,33)" rx="2" ry="2" />
<text  x="763.37" y="399.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="421" width="0.8" height="15.0" fill="rgb(221,183,50)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::(anonymous namespace)::do_free_pages (10,101,010 samples, 0.07%)</title><rect x="518.1" y="389" width="0.9" height="15.0" fill="rgb(216,217,26)" rx="2" ry="2" />
<text  x="521.13" y="399.5" ></text>
</g>
<g >
<title>runthreads (10,101,010 samples, 0.07%)</title><rect x="71.6" y="405" width="0.9" height="15.0" fill="rgb(226,115,31)" rx="2" ry="2" />
<text  x="74.62" y="415.5" ></text>
</g>
<g >
<title>blk_update_request (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="85" width="0.8" height="15.0" fill="rgb(249,48,21)" rx="2" ry="2" />
<text  x="1021.66" y="95.5" ></text>
</g>
<g >
<title>[larson-sized] (252,525,250 samples, 1.79%)</title><rect x="50.5" y="421" width="21.1" height="15.0" fill="rgb(225,122,34)" rx="2" ry="2" />
<text  x="53.52" y="431.5" ></text>
</g>
<g >
<title>do_idle (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="309" width="169.7" height="15.0" fill="rgb(213,94,46)" rx="2" ry="2" />
<text  x="1022.50" y="319.5" >do_idle</text>
</g>
<g >
<title>start_kernel (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="373" width="169.7" height="15.0" fill="rgb(238,97,32)" rx="2" ry="2" />
<text  x="1022.50" y="383.5" >start_kernel</text>
</g>
<g >
<title>scsi_end_request (10,101,010 samples, 0.07%)</title><rect x="1018.7" y="101" width="0.8" height="15.0" fill="rgb(212,164,40)" rx="2" ry="2" />
<text  x="1021.66" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_openat (20,202,020 samples, 0.14%)</title><rect x="848.2" y="357" width="1.6" height="15.0" fill="rgb(254,156,54)" rx="2" ry="2" />
<text  x="851.15" y="367.5" ></text>
</g>
<g >
<title>do_sys_openat2 (20,202,020 samples, 0.14%)</title><rect x="848.2" y="325" width="1.6" height="15.0" fill="rgb(248,109,53)" rx="2" ry="2" />
<text  x="851.15" y="335.5" ></text>
</g>
<g >
<title>arch_cpu_idle (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="277" width="169.7" height="15.0" fill="rgb(224,202,51)" rx="2" ry="2" />
<text  x="1022.50" y="287.5" >arch_cpu_idle</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::Span::BuildFreelist (10,101,010 samples, 0.07%)</title><rect x="843.9" y="357" width="0.9" height="15.0" fill="rgb(248,220,5)" rx="2" ry="2" />
<text  x="846.93" y="367.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (2,030,303,010 samples, 14.38%)</title><rect x="1019.5" y="389" width="169.7" height="15.0" fill="rgb(241,38,9)" rx="2" ry="2" />
<text  x="1022.50" y="399.5" >x86_64_start_reservat..</text>
</g>
<g >
<title>TCMallocInternalNewArray (1,626,262,610 samples, 11.52%)</title><rect x="607.6" y="405" width="135.9" height="15.0" fill="rgb(246,191,16)" rx="2" ry="2" />
<text  x="610.60" y="415.5" >TCMallocInternalN..</text>
</g>
</g>
</svg>
