<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>_dl_mcount_wrapper_check (10,101,010 samples, 0.07%)</title><rect x="10.8" y="261" width="0.9" height="15.0" fill="rgb(221,208,49)" rx="2" ry="2" />
<text  x="13.84" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="197" width="1.7" height="15.0" fill="rgb(209,71,24)" rx="2" ry="2" />
<text  x="849.11" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="101" width="1.7" height="15.0" fill="rgb(217,101,44)" rx="2" ry="2" />
<text  x="849.11" y="111.5" ></text>
</g>
<g >
<title>all (14,141,414,000 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(217,130,44)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (10,101,010 samples, 0.07%)</title><rect x="64.8" y="213" width="0.8" height="15.0" fill="rgb(213,34,53)" rx="2" ry="2" />
<text  x="67.79" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="245" width="0.9" height="15.0" fill="rgb(231,112,32)" rx="2" ry="2" />
<text  x="66.94" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="181" width="1.7" height="15.0" fill="rgb(229,41,15)" rx="2" ry="2" />
<text  x="849.11" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (30,303,030 samples, 0.21%)</title><rect x="848.6" y="277" width="2.6" height="15.0" fill="rgb(220,170,50)" rx="2" ry="2" />
<text  x="851.64" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="85" width="0.9" height="15.0" fill="rgb(229,178,14)" rx="2" ry="2" />
<text  x="66.94" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="213" width="0.9" height="15.0" fill="rgb(225,213,17)" rx="2" ry="2" />
<text  x="66.94" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::Span::Sample (10,101,010 samples, 0.07%)</title><rect x="751.7" y="229" width="0.9" height="15.0" fill="rgb(235,32,51)" rx="2" ry="2" />
<text  x="754.71" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (30,303,030 samples, 0.21%)</title><rect x="843.6" y="261" width="2.5" height="15.0" fill="rgb(210,71,6)" rx="2" ry="2" />
<text  x="846.59" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::huge_page_allocator_internal::HugePageAwareAllocator&lt;tcmalloc::tcmalloc_internal::huge_page_allocator_internal::StaticForwarder&gt;::Delete (10,101,010 samples, 0.07%)</title><rect x="535.9" y="229" width="0.9" height="15.0" fill="rgb(215,120,47)" rx="2" ry="2" />
<text  x="538.94" y="239.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="261" width="0.8" height="15.0" fill="rgb(223,135,25)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="181" width="171.9" height="15.0" fill="rgb(214,2,50)" rx="2" ry="2" />
<text  x="1021.06" y="191.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="133" width="171.9" height="15.0" fill="rgb(210,134,15)" rx="2" ry="2" />
<text  x="1021.06" y="143.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[unknown] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="245" width="171.9" height="15.0" fill="rgb(213,171,5)" rx="2" ry="2" />
<text  x="1021.06" y="255.5" >[unknown]</text>
</g>
<g >
<title>slow_alloc&lt;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;, decltype (60,606,060 samples, 0.43%)</title><rect x="750.0" y="261" width="5.1" height="15.0" fill="rgb(239,81,41)" rx="2" ry="2" />
<text  x="753.03" y="271.5" ></text>
</g>
<g >
<title>__clone (10,101,010 samples, 0.07%)</title><rect x="63.9" y="261" width="0.9" height="15.0" fill="rgb(225,225,30)" rx="2" ry="2" />
<text  x="66.94" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="847.8" y="261" width="0.8" height="15.0" fill="rgb(248,196,28)" rx="2" ry="2" />
<text  x="850.80" y="271.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArraySized (131,313,130 samples, 0.93%)</title><rect x="13.4" y="277" width="10.9" height="15.0" fill="rgb(225,85,27)" rx="2" ry="2" />
<text  x="16.37" y="287.5" ></text>
</g>
<g >
<title>larson-sized (10,040,403,940 samples, 71.00%)</title><rect x="13.4" y="293" width="837.8" height="15.0" fill="rgb(251,107,22)" rx="2" ry="2" />
<text  x="16.37" y="303.5" >larson-sized</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::UpdateCapacity (10,101,010 samples, 0.07%)</title><rect x="64.8" y="197" width="0.8" height="15.0" fill="rgb(230,86,28)" rx="2" ry="2" />
<text  x="67.79" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalNewArray (262,626,260 samples, 1.86%)</title><rect x="24.3" y="277" width="21.9" height="15.0" fill="rgb(218,21,47)" rx="2" ry="2" />
<text  x="27.33" y="287.5" >T..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="165" width="0.9" height="15.0" fill="rgb(223,165,53)" rx="2" ry="2" />
<text  x="68.63" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::(anonymous namespace)::do_free_pages (30,303,030 samples, 0.21%)</title><rect x="534.3" y="245" width="2.5" height="15.0" fill="rgb(226,94,34)" rx="2" ry="2" />
<text  x="537.26" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="117" width="171.9" height="15.0" fill="rgb(226,93,9)" rx="2" ry="2" />
<text  x="1021.06" y="127.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>swapper (4,060,606,020 samples, 28.71%)</title><rect x="851.2" y="293" width="338.8" height="15.0" fill="rgb(222,191,26)" rx="2" ry="2" />
<text  x="854.17" y="303.5" >swapper</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="133" width="0.9" height="15.0" fill="rgb(206,181,18)" rx="2" ry="2" />
<text  x="68.63" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="165" width="0.9" height="15.0" fill="rgb(205,180,11)" rx="2" ry="2" />
<text  x="66.94" y="175.5" ></text>
</g>
<g >
<title>[unknown] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="261" width="171.9" height="15.0" fill="rgb(223,109,27)" rx="2" ry="2" />
<text  x="1021.06" y="271.5" >[unknown]</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::central_freelist_internal::CentralFreeList&lt;tcmalloc::tcmalloc_internal::central_freelist_internal::StaticForwarder&gt;::RemoveRange (20,202,020 samples, 0.14%)</title><rect x="846.1" y="229" width="1.7" height="15.0" fill="rgb(224,50,2)" rx="2" ry="2" />
<text  x="849.11" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="847.8" y="213" width="0.8" height="15.0" fill="rgb(231,169,35)" rx="2" ry="2" />
<text  x="850.80" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="37" width="1.7" height="15.0" fill="rgb(205,219,40)" rx="2" ry="2" />
<text  x="849.11" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,999,999,980 samples, 14.14%)</title><rect x="851.2" y="229" width="166.9" height="15.0" fill="rgb(208,31,19)" rx="2" ry="2" />
<text  x="854.17" y="239.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[unknown] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="229" width="171.9" height="15.0" fill="rgb(224,66,17)" rx="2" ry="2" />
<text  x="1021.06" y="239.5" >[unknown]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="165" width="0.9" height="15.0" fill="rgb(249,53,26)" rx="2" ry="2" />
<text  x="13.84" y="175.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.07%)</title><rect x="11.7" y="277" width="0.8" height="15.0" fill="rgb(239,73,4)" rx="2" ry="2" />
<text  x="14.69" y="287.5" ></text>
</g>
<g >
<title>exercise_heap (9,333,333,240 samples, 66.00%)</title><rect x="67.3" y="277" width="778.8" height="15.0" fill="rgb(227,207,45)" rx="2" ry="2" />
<text  x="70.31" y="287.5" >exercise_heap</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (828,282,820 samples, 5.86%)</title><rect x="773.6" y="245" width="69.1" height="15.0" fill="rgb(250,175,36)" rx="2" ry="2" />
<text  x="776.63" y="255.5" >tcmallo..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="149" width="0.9" height="15.0" fill="rgb(242,30,5)" rx="2" ry="2" />
<text  x="66.94" y="159.5" ></text>
</g>
<g >
<title>do_lookup_x (10,101,010 samples, 0.07%)</title><rect x="12.5" y="277" width="0.9" height="15.0" fill="rgb(238,19,9)" rx="2" ry="2" />
<text  x="15.53" y="287.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArraySized (10,101,010 samples, 0.07%)</title><rect x="64.8" y="245" width="0.8" height="15.0" fill="rgb(225,91,34)" rx="2" ry="2" />
<text  x="67.79" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="133" width="1.7" height="15.0" fill="rgb(225,25,9)" rx="2" ry="2" />
<text  x="849.11" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,999,999,980 samples, 14.14%)</title><rect x="851.2" y="213" width="166.9" height="15.0" fill="rgb(218,178,54)" rx="2" ry="2" />
<text  x="854.17" y="223.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="181" width="0.9" height="15.0" fill="rgb(240,191,51)" rx="2" ry="2" />
<text  x="66.94" y="191.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (40,404,040 samples, 0.29%)</title><rect x="764.4" y="245" width="3.3" height="15.0" fill="rgb(206,217,12)" rx="2" ry="2" />
<text  x="767.36" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,060,606,020 samples, 28.71%)</title><rect x="851.2" y="277" width="338.8" height="15.0" fill="rgb(242,29,2)" rx="2" ry="2" />
<text  x="854.17" y="287.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="85" width="1.7" height="15.0" fill="rgb(218,102,12)" rx="2" ry="2" />
<text  x="849.11" y="95.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (20,202,020 samples, 0.14%)</title><rect x="841.1" y="229" width="1.6" height="15.0" fill="rgb(231,207,27)" rx="2" ry="2" />
<text  x="844.06" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="181" width="0.9" height="15.0" fill="rgb(245,201,36)" rx="2" ry="2" />
<text  x="68.63" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,999,999,980 samples, 14.14%)</title><rect x="851.2" y="181" width="166.9" height="15.0" fill="rgb(220,121,0)" rx="2" ry="2" />
<text  x="854.17" y="191.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,999,999,980 samples, 14.14%)</title><rect x="851.2" y="245" width="166.9" height="15.0" fill="rgb(220,163,17)" rx="2" ry="2" />
<text  x="854.17" y="255.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::UpdateCapacity (232,323,230 samples, 1.64%)</title><rect x="601.7" y="213" width="19.4" height="15.0" fill="rgb(249,124,23)" rx="2" ry="2" />
<text  x="604.69" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="69" width="0.9" height="15.0" fill="rgb(228,136,32)" rx="2" ry="2" />
<text  x="66.94" y="79.5" ></text>
</g>
<g >
<title>__madvise (10,101,010 samples, 0.07%)</title><rect x="65.6" y="277" width="0.9" height="15.0" fill="rgb(253,207,32)" rx="2" ry="2" />
<text  x="68.63" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="261" width="0.9" height="15.0" fill="rgb(216,134,18)" rx="2" ry="2" />
<text  x="68.63" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::HugePageFiller&lt;tcmalloc::tcmalloc_internal::PageTracker&gt;::UpdateFillerStatsTracker (10,101,010 samples, 0.07%)</title><rect x="753.4" y="197" width="0.8" height="15.0" fill="rgb(207,118,7)" rx="2" ry="2" />
<text  x="756.40" y="207.5" ></text>
</g>
<g >
<title>[larson-sized] (212,121,210 samples, 1.50%)</title><rect x="46.2" y="277" width="17.7" height="15.0" fill="rgb(212,144,42)" rx="2" ry="2" />
<text  x="49.24" y="287.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (20,202,020 samples, 0.14%)</title><rect x="816.6" y="213" width="1.7" height="15.0" fill="rgb(243,35,1)" rx="2" ry="2" />
<text  x="819.61" y="223.5" ></text>
</g>
<g >
<title>absl::GetCurrentTimeNanos (10,101,010 samples, 0.07%)</title><rect x="750.9" y="229" width="0.8" height="15.0" fill="rgb(233,220,48)" rx="2" ry="2" />
<text  x="753.87" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::Span::BuildFreelist (20,202,020 samples, 0.14%)</title><rect x="846.1" y="213" width="1.7" height="15.0" fill="rgb(247,172,30)" rx="2" ry="2" />
<text  x="849.11" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::huge_page_allocator_internal::HugePageAwareAllocator&lt;tcmalloc::tcmalloc_internal::huge_page_allocator_internal::StaticForwarder&gt;::New (20,202,020 samples, 0.14%)</title><rect x="752.6" y="229" width="1.6" height="15.0" fill="rgb(250,195,18)" rx="2" ry="2" />
<text  x="755.56" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="149" width="1.7" height="15.0" fill="rgb(250,78,44)" rx="2" ry="2" />
<text  x="849.11" y="159.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (10,101,010 samples, 0.07%)</title><rect x="820.8" y="213" width="0.9" height="15.0" fill="rgb(213,181,23)" rx="2" ry="2" />
<text  x="823.83" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::UpdateCapacity (232,323,230 samples, 1.64%)</title><rect x="821.7" y="229" width="19.4" height="15.0" fill="rgb(219,26,10)" rx="2" ry="2" />
<text  x="824.67" y="239.5" ></text>
</g>
<g >
<title>TcmallocSlab_Internal_PushBatch (101,010,100 samples, 0.71%)</title><rect x="813.2" y="229" width="8.5" height="15.0" fill="rgb(209,148,52)" rx="2" ry="2" />
<text  x="816.24" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="847.8" y="197" width="0.8" height="15.0" fill="rgb(208,45,45)" rx="2" ry="2" />
<text  x="850.80" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="213" width="0.9" height="15.0" fill="rgb(229,45,8)" rx="2" ry="2" />
<text  x="68.63" y="223.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (10,101,010 samples, 0.07%)</title><rect x="621.1" y="213" width="0.8" height="15.0" fill="rgb(254,26,9)" rx="2" ry="2" />
<text  x="624.07" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="197" width="0.9" height="15.0" fill="rgb(243,4,49)" rx="2" ry="2" />
<text  x="68.63" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArraySized (2,636,363,610 samples, 18.64%)</title><rect x="401.9" y="261" width="220.0" height="15.0" fill="rgb(208,43,54)" rx="2" ry="2" />
<text  x="404.93" y="271.5" >TCMallocInternalDeleteArraySi..</text>
</g>
<g >
<title>runthreads (10,101,010 samples, 0.07%)</title><rect x="64.8" y="261" width="0.8" height="15.0" fill="rgb(214,183,7)" rx="2" ry="2" />
<text  x="67.79" y="271.5" ></text>
</g>
<g >
<title>TcmallocSlab_Internal_PopBatch (10,101,010 samples, 0.07%)</title><rect x="555.3" y="229" width="0.9" height="15.0" fill="rgb(221,156,18)" rx="2" ry="2" />
<text  x="558.33" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="149" width="0.9" height="15.0" fill="rgb(223,95,52)" rx="2" ry="2" />
<text  x="13.84" y="159.5" ></text>
</g>
<g >
<title>start_thread (10,101,010 samples, 0.07%)</title><rect x="847.8" y="277" width="0.8" height="15.0" fill="rgb(238,124,5)" rx="2" ry="2" />
<text  x="850.80" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::AllocatedBytes (10,101,010 samples, 0.07%)</title><rect x="535.1" y="229" width="0.8" height="15.0" fill="rgb(228,130,7)" rx="2" ry="2" />
<text  x="538.10" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="11.7" y="261" width="0.8" height="15.0" fill="rgb(250,196,5)" rx="2" ry="2" />
<text  x="14.69" y="271.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (60,606,060 samples, 0.43%)</title><rect x="596.6" y="197" width="5.1" height="15.0" fill="rgb(209,153,40)" rx="2" ry="2" />
<text  x="599.63" y="207.5" ></text>
</g>
<g >
<title>hash_insert (10,101,010 samples, 0.07%)</title><rect x="10.0" y="245" width="0.8" height="15.0" fill="rgb(249,37,1)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (1,050,505,040 samples, 7.43%)</title><rect x="755.1" y="261" width="87.6" height="15.0" fill="rgb(240,205,16)" rx="2" ry="2" />
<text  x="758.09" y="271.5" >tcmalloc::..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="11.7" y="245" width="0.8" height="15.0" fill="rgb(206,30,13)" rx="2" ry="2" />
<text  x="14.69" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="847.8" y="245" width="0.8" height="15.0" fill="rgb(247,90,29)" rx="2" ry="2" />
<text  x="850.80" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="149" width="0.9" height="15.0" fill="rgb(216,36,45)" rx="2" ry="2" />
<text  x="68.63" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="197" width="0.9" height="15.0" fill="rgb(221,124,42)" rx="2" ry="2" />
<text  x="13.84" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="117" width="1.7" height="15.0" fill="rgb(235,30,40)" rx="2" ry="2" />
<text  x="849.11" y="127.5" ></text>
</g>
<g >
<title>[unknown] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="213" width="171.9" height="15.0" fill="rgb(223,182,18)" rx="2" ry="2" />
<text  x="1021.06" y="223.5" >[unknown]</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::SampleifyAllocation&lt;tcmalloc::tcmalloc_internal::Static, tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::NullOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt; &gt; (40,404,040 samples, 0.29%)</title><rect x="750.9" y="245" width="3.3" height="15.0" fill="rgb(224,126,27)" rx="2" ry="2" />
<text  x="753.87" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="165" width="171.9" height="15.0" fill="rgb(206,17,21)" rx="2" ry="2" />
<text  x="1021.06" y="175.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>__sched_yield (10,101,010 samples, 0.07%)</title><rect x="66.5" y="277" width="0.8" height="15.0" fill="rgb(209,164,16)" rx="2" ry="2" />
<text  x="69.47" y="287.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::TimeSeriesTracker&lt;tcmalloc::tcmalloc_internal::FillerStatsTracker&lt;600ul&gt;::FillerStatsEntry, tcmalloc::tcmalloc_internal::FillerStatsTracker&lt;600ul&gt;::FillerStats, 600ul&gt;::UpdateClock (10,101,010 samples, 0.07%)</title><rect x="753.4" y="181" width="0.8" height="15.0" fill="rgb(213,212,23)" rx="2" ry="2" />
<text  x="756.40" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="149" width="171.9" height="15.0" fill="rgb(228,35,28)" rx="2" ry="2" />
<text  x="1021.06" y="159.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (10,101,010 samples, 0.07%)</title><rect x="64.8" y="229" width="0.8" height="15.0" fill="rgb(244,225,30)" rx="2" ry="2" />
<text  x="67.79" y="239.5" ></text>
</g>
<g >
<title>TCMallocInternalNewArray (1,515,151,500 samples, 10.71%)</title><rect x="621.9" y="261" width="126.4" height="15.0" fill="rgb(242,6,11)" rx="2" ry="2" />
<text  x="624.91" y="271.5" >TCMallocInterna..</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::Sampler::RecordAllocationSlow (10,101,010 samples, 0.07%)</title><rect x="754.2" y="245" width="0.9" height="15.0" fill="rgb(213,151,49)" rx="2" ry="2" />
<text  x="757.24" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="101" width="0.9" height="15.0" fill="rgb(214,200,10)" rx="2" ry="2" />
<text  x="66.94" y="111.5" ></text>
</g>
<g >
<title>runthreads (20,202,020 samples, 0.14%)</title><rect x="846.1" y="277" width="1.7" height="15.0" fill="rgb(241,17,17)" rx="2" ry="2" />
<text  x="849.11" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="245" width="0.9" height="15.0" fill="rgb(242,183,52)" rx="2" ry="2" />
<text  x="13.84" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="133" width="0.9" height="15.0" fill="rgb(220,111,10)" rx="2" ry="2" />
<text  x="13.84" y="143.5" ></text>
</g>
<g >
<title>log2@@GLIBC_2.29 (10,101,010 samples, 0.07%)</title><rect x="754.2" y="229" width="0.9" height="15.0" fill="rgb(240,32,32)" rx="2" ry="2" />
<text  x="757.24" y="239.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (20,202,020 samples, 0.14%)</title><rect x="748.3" y="261" width="1.7" height="15.0" fill="rgb(227,131,26)" rx="2" ry="2" />
<text  x="751.34" y="271.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (10,101,010 samples, 0.07%)</title><rect x="842.7" y="261" width="0.9" height="15.0" fill="rgb(213,135,50)" rx="2" ry="2" />
<text  x="845.74" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="69" width="1.7" height="15.0" fill="rgb(228,166,39)" rx="2" ry="2" />
<text  x="849.11" y="79.5" ></text>
</g>
<g >
<title>TcmallocSlab_Internal_PopBatch (111,111,110 samples, 0.79%)</title><rect x="592.4" y="213" width="9.3" height="15.0" fill="rgb(248,95,47)" rx="2" ry="2" />
<text  x="595.41" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="847.8" y="229" width="0.8" height="15.0" fill="rgb(206,10,0)" rx="2" ry="2" />
<text  x="850.80" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="181" width="0.9" height="15.0" fill="rgb(211,106,32)" rx="2" ry="2" />
<text  x="13.84" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="245" width="0.9" height="15.0" fill="rgb(207,192,49)" rx="2" ry="2" />
<text  x="68.63" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="229" width="0.8" height="15.0" fill="rgb(241,39,1)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="53" width="1.7" height="15.0" fill="rgb(215,165,9)" rx="2" ry="2" />
<text  x="849.11" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="133" width="0.9" height="15.0" fill="rgb(221,166,28)" rx="2" ry="2" />
<text  x="66.94" y="143.5" ></text>
</g>
<g >
<title>TcmallocSlab_Internal_PushBatch (10,101,010 samples, 0.07%)</title><rect x="763.5" y="245" width="0.9" height="15.0" fill="rgb(211,176,30)" rx="2" ry="2" />
<text  x="766.51" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="229" width="0.9" height="15.0" fill="rgb(208,147,12)" rx="2" ry="2" />
<text  x="13.84" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,060,606,040 samples, 14.57%)</title><rect x="1018.1" y="197" width="171.9" height="15.0" fill="rgb(220,160,34)" rx="2" ry="2" />
<text  x="1021.06" y="207.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="846.1" y="165" width="1.7" height="15.0" fill="rgb(205,198,7)" rx="2" ry="2" />
<text  x="849.11" y="175.5" ></text>
</g>
<g >
<title>bench.sh (30,303,030 samples, 0.21%)</title><rect x="10.0" y="293" width="2.5" height="15.0" fill="rgb(219,197,27)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>[unknown] (20,202,020 samples, 0.14%)</title><rect x="10.0" y="277" width="1.7" height="15.0" fill="rgb(205,138,47)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (10,101,010 samples, 0.07%)</title><rect x="595.8" y="197" width="0.8" height="15.0" fill="rgb(227,131,18)" rx="2" ry="2" />
<text  x="598.79" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="11.7" y="229" width="0.8" height="15.0" fill="rgb(224,27,44)" rx="2" ry="2" />
<text  x="14.69" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="229" width="0.9" height="15.0" fill="rgb(220,66,3)" rx="2" ry="2" />
<text  x="66.94" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="213" width="0.8" height="15.0" fill="rgb(239,221,7)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (1,020,202,010 samples, 7.21%)</title><rect x="536.8" y="245" width="85.1" height="15.0" fill="rgb(211,22,36)" rx="2" ry="2" />
<text  x="539.79" y="255.5" >tcmalloc::..</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::HugePageFiller&lt;tcmalloc::tcmalloc_internal::PageTracker&gt;::TryGet (10,101,010 samples, 0.07%)</title><rect x="753.4" y="213" width="0.8" height="15.0" fill="rgb(221,143,13)" rx="2" ry="2" />
<text  x="756.40" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,999,999,980 samples, 14.14%)</title><rect x="851.2" y="261" width="166.9" height="15.0" fill="rgb(247,124,12)" rx="2" ry="2" />
<text  x="854.17" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>dirname (10,101,010 samples, 0.07%)</title><rect x="12.5" y="293" width="0.9" height="15.0" fill="rgb(219,78,27)" rx="2" ry="2" />
<text  x="15.53" y="303.5" ></text>
</g>
<g >
<title>__memmove_chk_avx_unaligned_erms (10,101,010 samples, 0.07%)</title><rect x="772.8" y="245" width="0.8" height="15.0" fill="rgb(241,28,18)" rx="2" ry="2" />
<text  x="775.79" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="65.6" y="229" width="0.9" height="15.0" fill="rgb(207,160,53)" rx="2" ry="2" />
<text  x="68.63" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (20,202,020 samples, 0.14%)</title><rect x="846.1" y="245" width="1.7" height="15.0" fill="rgb(217,206,33)" rx="2" ry="2" />
<text  x="849.11" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,999,999,980 samples, 14.14%)</title><rect x="851.2" y="197" width="166.9" height="15.0" fill="rgb(222,70,43)" rx="2" ry="2" />
<text  x="854.17" y="207.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="117" width="0.9" height="15.0" fill="rgb(220,190,42)" rx="2" ry="2" />
<text  x="66.94" y="127.5" ></text>
</g>
<g >
<title>__tls_get_addr (30,303,030 samples, 0.21%)</title><rect x="818.3" y="213" width="2.5" height="15.0" fill="rgb(220,107,39)" rx="2" ry="2" />
<text  x="821.30" y="223.5" ></text>
</g>
<g >
<title>[unknown] (20,202,020 samples, 0.14%)</title><rect x="63.9" y="277" width="1.7" height="15.0" fill="rgb(206,170,14)" rx="2" ry="2" />
<text  x="66.94" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="197" width="0.8" height="15.0" fill="rgb(249,223,7)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="10.8" y="213" width="0.9" height="15.0" fill="rgb(254,114,39)" rx="2" ry="2" />
<text  x="13.84" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="63.9" y="197" width="0.9" height="15.0" fill="rgb(231,172,33)" rx="2" ry="2" />
<text  x="66.94" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (60,606,060 samples, 0.43%)</title><rect x="767.7" y="245" width="5.1" height="15.0" fill="rgb(229,59,35)" rx="2" ry="2" />
<text  x="770.73" y="255.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (767,676,760 samples, 5.43%)</title><rect x="557.9" y="229" width="64.0" height="15.0" fill="rgb(248,19,18)" rx="2" ry="2" />
<text  x="560.86" y="239.5" >tcmallo..</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::CppOomPolicy, tcmalloc::tcmalloc_internal::DefaultAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (20,202,020 samples, 0.14%)</title><rect x="846.1" y="261" width="1.7" height="15.0" fill="rgb(234,7,2)" rx="2" ry="2" />
<text  x="849.11" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (20,202,020 samples, 0.14%)</title><rect x="556.2" y="229" width="1.7" height="15.0" fill="rgb(252,144,11)" rx="2" ry="2" />
<text  x="559.17" y="239.5" ></text>
</g>
</g>
</svg>
