<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="389" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="389" > </text>
<g id="frames">
<g >
<title>[cfrac] (141,414,140 samples, 1.17%)</title><rect x="16.9" y="309" width="13.9" height="15.0" fill="rgb(225,59,23)" rx="2" ry="2" />
<text  x="19.93" y="319.5" ></text>
</g>
<g >
<title>combineSoln (20,202,020 samples, 0.17%)</title><rect x="33.8" y="293" width="1.9" height="15.0" fill="rgb(247,97,31)" rx="2" ry="2" />
<text  x="36.76" y="303.5" ></text>
</g>
<g >
<title>__pagevec_release (10,101,010 samples, 0.08%)</title><rect x="10.0" y="85" width="1.0" height="15.0" fill="rgb(219,59,29)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_openat (10,101,010 samples, 0.08%)</title><rect x="10.0" y="261" width="1.0" height="15.0" fill="rgb(250,219,6)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>cpu_startup_entry (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="229" width="70.3" height="15.0" fill="rgb(212,68,49)" rx="2" ry="2" />
<text  x="1122.71" y="239.5" >cpu_sta..</text>
</g>
<g >
<title>start_kernel (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="277" width="70.3" height="15.0" fill="rgb(250,111,34)" rx="2" ry="2" />
<text  x="1122.71" y="287.5" >start_k..</text>
</g>
<g >
<title>__GI___libc_open (10,101,010 samples, 0.08%)</title><rect x="10.0" y="309" width="1.0" height="15.0" fill="rgb(244,58,16)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>start_secondary (5,303,030,250 samples, 44.04%)</title><rect x="600.0" y="309" width="519.7" height="15.0" fill="rgb(252,123,25)" rx="2" ry="2" />
<text  x="603.00" y="319.5" >start_secondary</text>
</g>
<g >
<title>customfree (151,515,150 samples, 1.26%)</title><rect x="469.3" y="325" width="14.9" height="15.0" fill="rgb(235,48,20)" rx="2" ry="2" />
<text  x="472.33" y="335.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="293" width="70.3" height="15.0" fill="rgb(245,93,48)" rx="2" ry="2" />
<text  x="1122.71" y="303.5" >x86_64_..</text>
</g>
<g >
<title>cpu_startup_entry (5,303,030,250 samples, 44.04%)</title><rect x="600.0" y="293" width="519.7" height="15.0" fill="rgb(244,195,54)" rx="2" ry="2" />
<text  x="603.00" y="303.5" >cpu_startup_entry</text>
</g>
<g >
<title>pdivmod (1,010,101,000 samples, 8.39%)</title><rect x="498.0" y="325" width="99.0" height="15.0" fill="rgb(221,21,31)" rx="2" ry="2" />
<text  x="501.04" y="335.5" >pdivmod</text>
</g>
<g >
<title>__cpuidle_text_start (5,303,030,250 samples, 44.04%)</title><rect x="600.0" y="229" width="519.7" height="15.0" fill="rgb(251,127,11)" rx="2" ry="2" />
<text  x="603.00" y="239.5" >__cpuidle_text_start</text>
</g>
<g >
<title>[unknown] (30,303,030 samples, 0.25%)</title><rect x="30.8" y="293" width="3.0" height="15.0" fill="rgb(237,18,14)" rx="2" ry="2" />
<text  x="33.79" y="303.5" ></text>
</g>
<g >
<title>swapper (6,020,201,960 samples, 50.00%)</title><rect x="600.0" y="341" width="590.0" height="15.0" fill="rgb(223,52,33)" rx="2" ry="2" />
<text  x="603.00" y="351.5" >swapper</text>
</g>
<g >
<title>palloc (111,111,110 samples, 0.92%)</title><rect x="104.0" y="309" width="10.9" height="15.0" fill="rgb(219,221,40)" rx="2" ry="2" />
<text  x="107.04" y="319.5" ></text>
</g>
<g >
<title>do_idle (5,303,030,250 samples, 44.04%)</title><rect x="600.0" y="277" width="519.7" height="15.0" fill="rgb(208,8,26)" rx="2" ry="2" />
<text  x="603.00" y="287.5" >do_idle</text>
</g>
<g >
<title>podd (20,202,020 samples, 0.17%)</title><rect x="448.5" y="309" width="2.0" height="15.0" fill="rgb(245,96,50)" rx="2" ry="2" />
<text  x="451.54" y="319.5" ></text>
</g>
<g >
<title>customfree (313,131,310 samples, 2.60%)</title><rect x="36.7" y="309" width="30.7" height="15.0" fill="rgb(216,213,39)" rx="2" ry="2" />
<text  x="39.73" y="319.5" >cu..</text>
</g>
<g >
<title>psub (191,919,190 samples, 1.59%)</title><rect x="450.5" y="309" width="18.8" height="15.0" fill="rgb(231,187,39)" rx="2" ry="2" />
<text  x="453.52" y="319.5" ></text>
</g>
<g >
<title>do_sys_openat2 (10,101,010 samples, 0.08%)</title><rect x="10.0" y="229" width="1.0" height="15.0" fill="rgb(221,104,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[cfrac] (60,606,060 samples, 0.50%)</title><rect x="11.0" y="325" width="5.9" height="15.0" fill="rgb(253,122,48)" rx="2" ry="2" />
<text  x="13.99" y="335.5" ></text>
</g>
<g >
<title>pmul (202,020,200 samples, 1.68%)</title><rect x="428.7" y="309" width="19.8" height="15.0" fill="rgb(244,137,41)" rx="2" ry="2" />
<text  x="431.74" y="319.5" ></text>
</g>
<g >
<title>all (12,040,403,920 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(228,94,7)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (6,020,201,960 samples, 50.00%)</title><rect x="600.0" y="325" width="590.0" height="15.0" fill="rgb(241,208,0)" rx="2" ry="2" />
<text  x="603.00" y="335.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>arch_call_rest_init (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="261" width="70.3" height="15.0" fill="rgb(231,224,14)" rx="2" ry="2" />
<text  x="1122.71" y="271.5" >arch_ca..</text>
</g>
<g >
<title>rest_init (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="245" width="70.3" height="15.0" fill="rgb(242,16,28)" rx="2" ry="2" />
<text  x="1122.71" y="255.5" >rest_init</text>
</g>
<g >
<title>unmap_vmas (10,101,010 samples, 0.08%)</title><rect x="599.0" y="213" width="1.0" height="15.0" fill="rgb(207,148,48)" rx="2" ry="2" />
<text  x="602.01" y="223.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="309" width="70.3" height="15.0" fill="rgb(209,132,49)" rx="2" ry="2" />
<text  x="1122.71" y="319.5" >x86_64_..</text>
</g>
<g >
<title>bench.sh (10,101,010 samples, 0.08%)</title><rect x="10.0" y="341" width="1.0" height="15.0" fill="rgb(254,115,46)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>palloc (40,404,040 samples, 0.34%)</title><rect x="494.1" y="325" width="3.9" height="15.0" fill="rgb(246,18,53)" rx="2" ry="2" />
<text  x="497.08" y="335.5" ></text>
</g>
<g >
<title>pimod (1,989,898,970 samples, 16.53%)</title><rect x="233.7" y="309" width="195.0" height="15.0" fill="rgb(215,138,13)" rx="2" ry="2" />
<text  x="236.72" y="319.5" >pimod</text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.42%)</title><rect x="30.8" y="309" width="4.9" height="15.0" fill="rgb(210,149,32)" rx="2" ry="2" />
<text  x="33.79" y="319.5" ></text>
</g>
<g >
<title>do_group_exit (10,101,010 samples, 0.08%)</title><rect x="599.0" y="277" width="1.0" height="15.0" fill="rgb(253,177,28)" rx="2" ry="2" />
<text  x="602.01" y="287.5" ></text>
</g>
<g >
<title>pcfrac (80,808,080 samples, 0.67%)</title><rect x="114.9" y="309" width="8.0" height="15.0" fill="rgb(252,69,41)" rx="2" ry="2" />
<text  x="117.93" y="319.5" ></text>
</g>
<g >
<title>default_idle_call (5,303,030,250 samples, 44.04%)</title><rect x="600.0" y="261" width="519.7" height="15.0" fill="rgb(236,88,44)" rx="2" ry="2" />
<text  x="603.00" y="271.5" >default_idle_call</text>
</g>
<g >
<title>[unknown] (4,616,161,570 samples, 38.34%)</title><rect x="16.9" y="325" width="452.4" height="15.0" fill="rgb(244,160,37)" rx="2" ry="2" />
<text  x="19.93" y="335.5" >[unknown]</text>
</g>
<g >
<title>do_open.isra.0 (10,101,010 samples, 0.08%)</title><rect x="10.0" y="181" width="1.0" height="15.0" fill="rgb(235,146,51)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>pfree (10,101,010 samples, 0.08%)</title><rect x="597.0" y="325" width="1.0" height="15.0" fill="rgb(236,200,2)" rx="2" ry="2" />
<text  x="600.03" y="335.5" ></text>
</g>
<g >
<title>zap_pte_range (10,101,010 samples, 0.08%)</title><rect x="599.0" y="165" width="1.0" height="15.0" fill="rgb(225,189,22)" rx="2" ry="2" />
<text  x="602.01" y="175.5" ></text>
</g>
<g >
<title>exit_mmap (10,101,010 samples, 0.08%)</title><rect x="599.0" y="229" width="1.0" height="15.0" fill="rgb(253,186,20)" rx="2" ry="2" />
<text  x="602.01" y="239.5" ></text>
</g>
<g >
<title>cfrac (5,999,999,940 samples, 49.83%)</title><rect x="11.0" y="341" width="588.0" height="15.0" fill="rgb(250,146,53)" rx="2" ry="2" />
<text  x="13.99" y="351.5" >cfrac</text>
</g>
<g >
<title>picmp (10,101,010 samples, 0.08%)</title><rect x="209.0" y="309" width="1.0" height="15.0" fill="rgb(240,93,22)" rx="2" ry="2" />
<text  x="211.98" y="319.5" ></text>
</g>
<g >
<title>unmap_single_vma (10,101,010 samples, 0.08%)</title><rect x="599.0" y="197" width="1.0" height="15.0" fill="rgb(219,118,8)" rx="2" ry="2" />
<text  x="602.01" y="207.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.08%)</title><rect x="10.0" y="325" width="1.0" height="15.0" fill="rgb(238,99,45)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>dirname (10,101,010 samples, 0.08%)</title><rect x="599.0" y="341" width="1.0" height="15.0" fill="rgb(249,163,40)" rx="2" ry="2" />
<text  x="602.01" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (10,101,010 samples, 0.08%)</title><rect x="599.0" y="293" width="1.0" height="15.0" fill="rgb(250,125,8)" rx="2" ry="2" />
<text  x="602.01" y="303.5" ></text>
</g>
<g >
<title>do_idle (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="213" width="70.3" height="15.0" fill="rgb(254,41,40)" rx="2" ry="2" />
<text  x="1122.71" y="223.5" >do_idle</text>
</g>
<g >
<title>mmput (10,101,010 samples, 0.08%)</title><rect x="599.0" y="245" width="1.0" height="15.0" fill="rgb(223,80,25)" rx="2" ry="2" />
<text  x="602.01" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.08%)</title><rect x="599.0" y="325" width="1.0" height="15.0" fill="rgb(219,229,6)" rx="2" ry="2" />
<text  x="602.01" y="335.5" ></text>
</g>
<g >
<title>pcmp (252,525,250 samples, 2.10%)</title><rect x="122.9" y="309" width="24.7" height="15.0" fill="rgb(246,223,33)" rx="2" ry="2" />
<text  x="125.85" y="319.5" >p..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10,101,010 samples, 0.08%)</title><rect x="35.7" y="309" width="1.0" height="15.0" fill="rgb(206,154,8)" rx="2" ry="2" />
<text  x="38.74" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.08%)</title><rect x="599.0" y="309" width="1.0" height="15.0" fill="rgb(218,26,29)" rx="2" ry="2" />
<text  x="602.01" y="319.5" ></text>
</g>
<g >
<title>truncate_inode_pages_range (10,101,010 samples, 0.08%)</title><rect x="10.0" y="101" width="1.0" height="15.0" fill="rgb(225,61,12)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>customfree (20,202,020 samples, 0.17%)</title><rect x="30.8" y="277" width="2.0" height="15.0" fill="rgb(243,151,6)" rx="2" ry="2" />
<text  x="33.79" y="287.5" ></text>
</g>
<g >
<title>custommalloc (101,010,100 samples, 0.84%)</title><rect x="484.2" y="325" width="9.9" height="15.0" fill="rgb(239,141,43)" rx="2" ry="2" />
<text  x="487.18" y="335.5" ></text>
</g>
<g >
<title>truncate_pagecache (10,101,010 samples, 0.08%)</title><rect x="10.0" y="117" width="1.0" height="15.0" fill="rgb(214,161,30)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>ext4_setattr (10,101,010 samples, 0.08%)</title><rect x="10.0" y="133" width="1.0" height="15.0" fill="rgb(218,139,25)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>notify_change (10,101,010 samples, 0.08%)</title><rect x="10.0" y="149" width="1.0" height="15.0" fill="rgb(246,97,12)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>newSoln (10,101,010 samples, 0.08%)</title><rect x="97.1" y="309" width="1.0" height="15.0" fill="rgb(250,151,37)" rx="2" ry="2" />
<text  x="100.11" y="319.5" ></text>
</g>
<g >
<title>padd (60,606,060 samples, 0.50%)</title><rect x="98.1" y="309" width="5.9" height="15.0" fill="rgb(206,138,52)" rx="2" ry="2" />
<text  x="101.10" y="319.5" ></text>
</g>
<g >
<title>arch_cpu_idle (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="181" width="70.3" height="15.0" fill="rgb(205,113,26)" rx="2" ry="2" />
<text  x="1122.71" y="191.5" >arch_cp..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.08%)</title><rect x="10.0" y="293" width="1.0" height="15.0" fill="rgb(243,146,21)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>pfree (20,202,020 samples, 0.17%)</title><rect x="206.0" y="309" width="2.0" height="15.0" fill="rgb(232,206,44)" rx="2" ry="2" />
<text  x="209.01" y="319.5" ></text>
</g>
<g >
<title>pidiv (242,424,240 samples, 2.01%)</title><rect x="210.0" y="309" width="23.7" height="15.0" fill="rgb(254,122,6)" rx="2" ry="2" />
<text  x="212.97" y="319.5" >p..</text>
</g>
<g >
<title>default_idle_call (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="197" width="70.3" height="15.0" fill="rgb(251,76,30)" rx="2" ry="2" />
<text  x="1122.71" y="207.5" >default..</text>
</g>
<g >
<title>path_openat (10,101,010 samples, 0.08%)</title><rect x="10.0" y="197" width="1.0" height="15.0" fill="rgb(222,150,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.08%)</title><rect x="10.0" y="53" width="1.0" height="15.0" fill="rgb(230,142,48)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>pdivmod (282,828,280 samples, 2.35%)</title><rect x="148.6" y="309" width="27.7" height="15.0" fill="rgb(243,164,42)" rx="2" ry="2" />
<text  x="151.59" y="319.5" >p..</text>
</g>
<g >
<title>pcmpz (10,101,010 samples, 0.08%)</title><rect x="147.6" y="309" width="1.0" height="15.0" fill="rgb(241,162,47)" rx="2" ry="2" />
<text  x="150.60" y="319.5" ></text>
</g>
<g >
<title>pnorm (10,101,010 samples, 0.08%)</title><rect x="598.0" y="325" width="1.0" height="15.0" fill="rgb(242,156,14)" rx="2" ry="2" />
<text  x="601.02" y="335.5" ></text>
</g>
<g >
<title>unmap_page_range (10,101,010 samples, 0.08%)</title><rect x="599.0" y="181" width="1.0" height="15.0" fill="rgb(249,199,21)" rx="2" ry="2" />
<text  x="602.01" y="191.5" ></text>
</g>
<g >
<title>pfactorQ (303,030,300 samples, 2.52%)</title><rect x="176.3" y="309" width="29.7" height="15.0" fill="rgb(253,179,16)" rx="2" ry="2" />
<text  x="179.31" y="319.5" >pf..</text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.08%)</title><rect x="10.0" y="69" width="1.0" height="15.0" fill="rgb(208,134,19)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (717,171,710 samples, 5.96%)</title><rect x="1119.7" y="165" width="70.3" height="15.0" fill="rgb(210,154,38)" rx="2" ry="2" />
<text  x="1122.71" y="175.5" >__cpuid..</text>
</g>
<g >
<title>custommalloc (303,030,300 samples, 2.52%)</title><rect x="67.4" y="309" width="29.7" height="15.0" fill="rgb(216,19,28)" rx="2" ry="2" />
<text  x="70.42" y="319.5" >cu..</text>
</g>
<g >
<title>free_unref_page_prepare.part.0 (10,101,010 samples, 0.08%)</title><rect x="10.0" y="37" width="1.0" height="15.0" fill="rgb(206,72,2)" rx="2" ry="2" />
<text  x="13.00" y="47.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.08%)</title><rect x="10.0" y="277" width="1.0" height="15.0" fill="rgb(211,175,1)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>do_exit (10,101,010 samples, 0.08%)</title><rect x="599.0" y="261" width="1.0" height="15.0" fill="rgb(229,68,37)" rx="2" ry="2" />
<text  x="602.01" y="271.5" ></text>
</g>
<g >
<title>do_sys_open (10,101,010 samples, 0.08%)</title><rect x="10.0" y="245" width="1.0" height="15.0" fill="rgb(226,99,24)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>do_filp_open (10,101,010 samples, 0.08%)</title><rect x="10.0" y="213" width="1.0" height="15.0" fill="rgb(213,123,26)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>arch_cpu_idle (5,303,030,250 samples, 44.04%)</title><rect x="600.0" y="245" width="519.7" height="15.0" fill="rgb(231,46,50)" rx="2" ry="2" />
<text  x="603.00" y="255.5" >arch_cpu_idle</text>
</g>
<g >
<title>phalf (10,101,010 samples, 0.08%)</title><rect x="208.0" y="309" width="1.0" height="15.0" fill="rgb(245,45,49)" rx="2" ry="2" />
<text  x="210.99" y="319.5" ></text>
</g>
<g >
<title>pfree (10,101,010 samples, 0.08%)</title><rect x="32.8" y="277" width="1.0" height="15.0" fill="rgb(209,82,43)" rx="2" ry="2" />
<text  x="35.77" y="287.5" ></text>
</g>
<g >
<title>do_truncate (10,101,010 samples, 0.08%)</title><rect x="10.0" y="165" width="1.0" height="15.0" fill="rgb(228,111,14)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
</g>
</svg>
