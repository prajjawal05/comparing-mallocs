<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>xxfree (40,404,040 samples, 0.28%)</title><rect x="745.6" y="405" width="3.3" height="15.0" fill="rgb(250,24,11)" rx="2" ry="2" />
<text  x="748.65" y="415.5" ></text>
</g>
<g >
<title>__tls_get_addr (70,707,070 samples, 0.49%)</title><rect x="695.5" y="373" width="5.7" height="15.0" fill="rgb(215,229,42)" rx="2" ry="2" />
<text  x="698.45" y="383.5" ></text>
</g>
<g >
<title>_dl_addr (10,101,010 samples, 0.07%)</title><rect x="10.8" y="405" width="0.8" height="15.0" fill="rgb(206,36,53)" rx="2" ry="2" />
<text  x="13.82" y="415.5" ></text>
</g>
<g >
<title>BibopHeap::allocateSmallObject (2,040,404,020 samples, 14.09%)</title><rect x="543.2" y="389" width="166.2" height="15.0" fill="rgb(249,94,36)" rx="2" ry="2" />
<text  x="546.22" y="399.5" >BibopHeap::allocateSm..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="309" width="223.0" height="15.0" fill="rgb(246,141,33)" rx="2" ry="2" />
<text  x="970.00" y="319.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>pthread_spin_unlock (10,101,010 samples, 0.07%)</title><rect x="730.8" y="389" width="0.9" height="15.0" fill="rgb(229,10,0)" rx="2" ry="2" />
<text  x="733.84" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="101" width="0.9" height="15.0" fill="rgb(252,95,44)" rx="2" ry="2" />
<text  x="697.63" y="111.5" ></text>
</g>
<g >
<title>redis-server (20,202,020 samples, 0.14%)</title><rect x="752.2" y="421" width="1.7" height="15.0" fill="rgb(232,63,35)" rx="2" ry="2" />
<text  x="755.23" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="325" width="7.4" height="15.0" fill="rgb(225,103,11)" rx="2" ry="2" />
<text  x="23.70" y="335.5" ></text>
</g>
<g >
<title>__mprotect (10,101,010 samples, 0.07%)</title><rect x="38.0" y="357" width="0.8" height="15.0" fill="rgb(252,82,11)" rx="2" ry="2" />
<text  x="40.98" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.28%)</title><rect x="24.8" y="229" width="3.3" height="15.0" fill="rgb(215,49,45)" rx="2" ry="2" />
<text  x="27.81" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (111,111,110 samples, 0.77%)</title><rect x="29.7" y="405" width="9.1" height="15.0" fill="rgb(205,71,9)" rx="2" ry="2" />
<text  x="32.75" y="415.5" ></text>
</g>
<g >
<title>larson-sized (9,080,807,990 samples, 62.69%)</title><rect x="11.6" y="421" width="739.8" height="15.0" fill="rgb(235,202,6)" rx="2" ry="2" />
<text  x="14.65" y="431.5" >larson-sized</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="27.3" y="181" width="0.8" height="15.0" fill="rgb(239,217,32)" rx="2" ry="2" />
<text  x="30.28" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.56%)</title><rect x="21.5" y="261" width="6.6" height="15.0" fill="rgb(239,45,29)" rx="2" ry="2" />
<text  x="24.52" y="271.5" ></text>
</g>
<g >
<title>runthreads (50,505,050 samples, 0.35%)</title><rect x="40.4" y="389" width="4.2" height="15.0" fill="rgb(247,107,22)" rx="2" ry="2" />
<text  x="43.45" y="399.5" ></text>
</g>
<g >
<title>[unknown] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="373" width="223.0" height="15.0" fill="rgb(220,59,35)" rx="2" ry="2" />
<text  x="970.00" y="383.5" >[unknown]</text>
</g>
<g >
<title>rand_sse@plt (10,101,010 samples, 0.07%)</title><rect x="734.1" y="389" width="0.9" height="15.0" fill="rgb(243,53,30)" rx="2" ry="2" />
<text  x="737.13" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (373,737,370 samples, 2.58%)</title><rect x="650.2" y="293" width="30.4" height="15.0" fill="rgb(211,135,54)" rx="2" ry="2" />
<text  x="653.20" y="303.5" >[[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (111,111,110 samples, 0.77%)</title><rect x="686.4" y="261" width="9.1" height="15.0" fill="rgb(253,194,5)" rx="2" ry="2" />
<text  x="689.40" y="271.5" ></text>
</g>
<g >
<title>sed (10,101,010 samples, 0.07%)</title><rect x="753.9" y="421" width="0.8" height="15.0" fill="rgb(235,205,6)" rx="2" ry="2" />
<text  x="756.88" y="431.5" ></text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (10,101,010 samples, 0.07%)</title><rect x="751.4" y="389" width="0.8" height="15.0" fill="rgb(247,114,12)" rx="2" ry="2" />
<text  x="754.41" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (181,818,180 samples, 1.26%)</title><rect x="680.6" y="341" width="14.9" height="15.0" fill="rgb(212,226,50)" rx="2" ry="2" />
<text  x="683.64" y="351.5" ></text>
</g>
<g >
<title>BibopHeap::allocateSmallObject@plt (20,202,020 samples, 0.14%)</title><rect x="13.3" y="405" width="1.6" height="15.0" fill="rgb(245,95,18)" rx="2" ry="2" />
<text  x="16.29" y="415.5" ></text>
</g>
<g >
<title>exercise_heap (6,070,707,010 samples, 41.91%)</title><rect x="44.6" y="405" width="494.5" height="15.0" fill="rgb(250,25,45)" rx="2" ry="2" />
<text  x="47.56" y="415.5" >exercise_heap</text>
</g>
<g >
<title>pthread_spin_lock@plt (40,404,040 samples, 0.28%)</title><rect x="525.9" y="389" width="3.3" height="15.0" fill="rgb(211,116,19)" rx="2" ry="2" />
<text  x="528.94" y="399.5" ></text>
</g>
<g >
<title>rand_sse (10,101,010 samples, 0.07%)</title><rect x="733.3" y="389" width="0.8" height="15.0" fill="rgb(224,176,23)" rx="2" ry="2" />
<text  x="736.31" y="399.5" ></text>
</g>
<g >
<title>do_lookup_x (10,101,010 samples, 0.07%)</title><rect x="753.9" y="405" width="0.8" height="15.0" fill="rgb(236,135,52)" rx="2" ry="2" />
<text  x="756.88" y="415.5" ></text>
</g>
<g >
<title>[libjemalloc.so.2] (10,101,010 samples, 0.07%)</title><rect x="752.2" y="389" width="0.9" height="15.0" fill="rgb(221,147,9)" rx="2" ry="2" />
<text  x="755.23" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="53" width="0.9" height="15.0" fill="rgb(229,156,32)" rx="2" ry="2" />
<text  x="697.63" y="63.5" ></text>
</g>
<g >
<title>BibopHeap::freeSmallObject@plt (30,303,030 samples, 0.21%)</title><rect x="18.2" y="405" width="2.5" height="15.0" fill="rgb(247,104,43)" rx="2" ry="2" />
<text  x="21.23" y="415.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.14%)</title><rect x="38.8" y="389" width="1.6" height="15.0" fill="rgb(253,73,24)" rx="2" ry="2" />
<text  x="41.80" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="277" width="223.0" height="15.0" fill="rgb(218,220,30)" rx="2" ry="2" />
<text  x="970.00" y="287.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>operator delete[] (20,202,020 samples, 0.14%)</title><rect x="539.9" y="405" width="1.7" height="15.0" fill="rgb(253,57,9)" rx="2" ry="2" />
<text  x="542.93" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.70%)</title><rect x="672.4" y="229" width="8.2" height="15.0" fill="rgb(220,168,12)" rx="2" ry="2" />
<text  x="675.41" y="239.5" ></text>
</g>
<g >
<title>rand_sse (90,909,090 samples, 0.63%)</title><rect x="702.0" y="373" width="7.4" height="15.0" fill="rgb(212,137,29)" rx="2" ry="2" />
<text  x="705.04" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (636,363,630 samples, 4.39%)</title><rect x="628.8" y="357" width="51.8" height="15.0" fill="rgb(239,216,14)" rx="2" ry="2" />
<text  x="631.80" y="367.5" >[[ker..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (636,363,630 samples, 4.39%)</title><rect x="628.8" y="373" width="51.8" height="15.0" fill="rgb(216,30,43)" rx="2" ry="2" />
<text  x="631.80" y="383.5" >[[ker..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (101,010,100 samples, 0.70%)</title><rect x="687.2" y="245" width="8.3" height="15.0" fill="rgb(251,53,47)" rx="2" ry="2" />
<text  x="690.22" y="255.5" ></text>
</g>
<g >
<title>pthread_spin_lock (252,525,250 samples, 1.74%)</title><rect x="709.4" y="389" width="20.6" height="15.0" fill="rgb(248,77,40)" rx="2" ry="2" />
<text  x="712.44" y="399.5" ></text>
</g>
<g >
<title>operator new[] (30,303,030 samples, 0.21%)</title><rect x="743.2" y="405" width="2.4" height="15.0" fill="rgb(245,7,30)" rx="2" ry="2" />
<text  x="746.18" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.35%)</title><rect x="676.5" y="213" width="4.1" height="15.0" fill="rgb(226,227,5)" rx="2" ry="2" />
<text  x="679.53" y="223.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="751.4" y="405" width="0.8" height="15.0" fill="rgb(244,34,1)" rx="2" ry="2" />
<text  x="754.41" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (484,848,480 samples, 3.35%)</title><rect x="641.1" y="325" width="39.5" height="15.0" fill="rgb(227,39,18)" rx="2" ry="2" />
<text  x="644.14" y="335.5" >[[k..</text>
</g>
<g >
<title>[unknown] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="389" width="223.0" height="15.0" fill="rgb(250,223,1)" rx="2" ry="2" />
<text  x="970.00" y="399.5" >[unknown]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="261" width="223.0" height="15.0" fill="rgb(233,147,28)" rx="2" ry="2" />
<text  x="970.00" y="271.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[unknown] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="341" width="223.0" height="15.0" fill="rgb(219,160,44)" rx="2" ry="2" />
<text  x="970.00" y="351.5" >[unknown]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (373,737,370 samples, 2.58%)</title><rect x="650.2" y="277" width="30.4" height="15.0" fill="rgb(214,40,10)" rx="2" ry="2" />
<text  x="653.20" y="287.5" >[[..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (363,636,360 samples, 2.51%)</title><rect x="651.0" y="261" width="29.6" height="15.0" fill="rgb(221,103,19)" rx="2" ry="2" />
<text  x="654.02" y="271.5" >[[..</text>
</g>
<g >
<title>BibopHeap::freeSmallObject (4,363,636,320 samples, 30.13%)</title><rect x="108.7" y="389" width="355.5" height="15.0" fill="rgb(244,133,17)" rx="2" ry="2" />
<text  x="111.74" y="399.5" >BibopHeap::freeSmallObject</text>
</g>
<g >
<title>BibopHeap::freeSmallObject (40,404,040 samples, 0.28%)</title><rect x="41.3" y="373" width="3.3" height="15.0" fill="rgb(237,69,46)" rx="2" ry="2" />
<text  x="44.27" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (181,818,180 samples, 1.26%)</title><rect x="680.6" y="309" width="14.9" height="15.0" fill="rgb(220,164,0)" rx="2" ry="2" />
<text  x="683.64" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (70,707,070 samples, 0.49%)</title><rect x="22.3" y="245" width="5.8" height="15.0" fill="rgb(249,7,54)" rx="2" ry="2" />
<text  x="25.34" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (20,202,020 samples, 0.14%)</title><rect x="26.5" y="213" width="1.6" height="15.0" fill="rgb(233,43,32)" rx="2" ry="2" />
<text  x="29.46" y="223.5" ></text>
</g>
<g >
<title>BibopHeap::getShadowObjectInfo (40,404,040 samples, 0.28%)</title><rect x="464.2" y="389" width="3.3" height="15.0" fill="rgb(213,100,46)" rx="2" ry="2" />
<text  x="467.23" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="293" width="7.4" height="15.0" fill="rgb(206,125,18)" rx="2" ry="2" />
<text  x="23.70" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="405" width="7.4" height="15.0" fill="rgb(213,28,12)" rx="2" ry="2" />
<text  x="23.70" y="415.5" ></text>
</g>
<g >
<title>bench.sh (10,101,010 samples, 0.07%)</title><rect x="10.0" y="421" width="0.8" height="15.0" fill="rgb(240,67,29)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (80,808,080 samples, 0.56%)</title><rect x="688.9" y="229" width="6.6" height="15.0" fill="rgb(226,222,8)" rx="2" ry="2" />
<text  x="691.87" y="239.5" ></text>
</g>
<g >
<title>BibopHeap::getShadowObjectInfo (262,626,260 samples, 1.81%)</title><rect x="442.8" y="373" width="21.4" height="15.0" fill="rgb(242,22,16)" rx="2" ry="2" />
<text  x="445.83" y="383.5" >B..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="293" width="223.0" height="15.0" fill="rgb(240,45,0)" rx="2" ry="2" />
<text  x="970.00" y="303.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="27.3" y="197" width="0.8" height="15.0" fill="rgb(206,38,26)" rx="2" ry="2" />
<text  x="30.28" y="207.5" ></text>
</g>
<g >
<title>__tls_get_addr@plt (10,101,010 samples, 0.07%)</title><rect x="701.2" y="373" width="0.8" height="15.0" fill="rgb(215,7,14)" rx="2" ry="2" />
<text  x="704.21" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,606,060,580 samples, 17.99%)</title><rect x="754.7" y="373" width="212.3" height="15.0" fill="rgb(234,103,14)" rx="2" ry="2" />
<text  x="757.70" y="383.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="405" width="0.8" height="15.0" fill="rgb(215,96,44)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.07%)</title><rect x="539.1" y="405" width="0.8" height="15.0" fill="rgb(227,0,6)" rx="2" ry="2" />
<text  x="542.11" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="357" width="7.4" height="15.0" fill="rgb(236,217,26)" rx="2" ry="2" />
<text  x="23.70" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="245" width="223.0" height="15.0" fill="rgb(249,53,34)" rx="2" ry="2" />
<text  x="970.00" y="255.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>pthread_spin_lock@plt (10,101,010 samples, 0.07%)</title><rect x="730.0" y="389" width="0.8" height="15.0" fill="rgb(208,155,12)" rx="2" ry="2" />
<text  x="733.01" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.28%)</title><rect x="692.2" y="197" width="3.3" height="15.0" fill="rgb(239,61,24)" rx="2" ry="2" />
<text  x="695.16" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="373" width="7.4" height="15.0" fill="rgb(210,189,47)" rx="2" ry="2" />
<text  x="23.70" y="383.5" ></text>
</g>
<g >
<title>[unknown] (70,707,070 samples, 0.49%)</title><rect x="38.8" y="405" width="5.8" height="15.0" fill="rgb(242,199,9)" rx="2" ry="2" />
<text  x="41.80" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (161,616,160 samples, 1.12%)</title><rect x="667.5" y="245" width="13.1" height="15.0" fill="rgb(229,8,18)" rx="2" ry="2" />
<text  x="670.48" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="277" width="7.4" height="15.0" fill="rgb(253,221,10)" rx="2" ry="2" />
<text  x="23.70" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,606,060,580 samples, 17.99%)</title><rect x="754.7" y="309" width="212.3" height="15.0" fill="rgb(229,134,4)" rx="2" ry="2" />
<text  x="757.70" y="319.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (181,818,180 samples, 1.26%)</title><rect x="680.6" y="325" width="14.9" height="15.0" fill="rgb(241,112,16)" rx="2" ry="2" />
<text  x="683.64" y="335.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="69" width="0.9" height="15.0" fill="rgb(225,161,17)" rx="2" ry="2" />
<text  x="697.63" y="79.5" ></text>
</g>
<g >
<title>all (14,484,848,340 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(210,59,18)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (50,505,050 samples, 0.35%)</title><rect x="691.3" y="213" width="4.2" height="15.0" fill="rgb(210,74,10)" rx="2" ry="2" />
<text  x="694.34" y="223.5" ></text>
</g>
<g >
<title>BibopHeap::allocateSmallObject (20,202,020 samples, 0.14%)</title><rect x="38.8" y="373" width="1.6" height="15.0" fill="rgb(224,19,19)" rx="2" ry="2" />
<text  x="41.80" y="383.5" ></text>
</g>
<g >
<title>[larson-sized] (20,202,020 samples, 0.14%)</title><rect x="28.1" y="405" width="1.6" height="15.0" fill="rgb(229,187,36)" rx="2" ry="2" />
<text  x="31.10" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,606,060,580 samples, 17.99%)</title><rect x="754.7" y="325" width="212.3" height="15.0" fill="rgb(238,16,14)" rx="2" ry="2" />
<text  x="757.70" y="335.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="309" width="7.4" height="15.0" fill="rgb(248,57,46)" rx="2" ry="2" />
<text  x="23.70" y="319.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="753.1" y="357" width="0.8" height="15.0" fill="rgb(212,102,5)" rx="2" ry="2" />
<text  x="756.05" y="367.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (181,818,180 samples, 1.26%)</title><rect x="680.6" y="293" width="14.9" height="15.0" fill="rgb(213,153,45)" rx="2" ry="2" />
<text  x="683.64" y="303.5" ></text>
</g>
<g >
<title>__mprotect (181,818,180 samples, 1.26%)</title><rect x="680.6" y="373" width="14.9" height="15.0" fill="rgb(210,224,53)" rx="2" ry="2" />
<text  x="683.64" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (151,515,150 samples, 1.05%)</title><rect x="683.1" y="277" width="12.4" height="15.0" fill="rgb(213,198,30)" rx="2" ry="2" />
<text  x="686.11" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="325" width="223.0" height="15.0" fill="rgb(232,28,0)" rx="2" ry="2" />
<text  x="970.00" y="335.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="753.1" y="389" width="0.8" height="15.0" fill="rgb(208,130,50)" rx="2" ry="2" />
<text  x="756.05" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="117" width="0.9" height="15.0" fill="rgb(217,77,9)" rx="2" ry="2" />
<text  x="697.63" y="127.5" ></text>
</g>
<g >
<title>[unknown] (2,737,373,710 samples, 18.90%)</title><rect x="967.0" y="357" width="223.0" height="15.0" fill="rgb(236,39,45)" rx="2" ry="2" />
<text  x="970.00" y="367.5" >[unknown]</text>
</g>
<g >
<title>BibopHeap::getShadowObjectInfo@plt (10,101,010 samples, 0.07%)</title><rect x="467.5" y="389" width="0.8" height="15.0" fill="rgb(249,65,3)" rx="2" ry="2" />
<text  x="470.52" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="753.1" y="373" width="0.8" height="15.0" fill="rgb(227,80,30)" rx="2" ry="2" />
<text  x="756.05" y="383.5" ></text>
</g>
<g >
<title>xxmalloc (30,303,030 samples, 0.21%)</title><rect x="748.9" y="405" width="2.5" height="15.0" fill="rgb(227,203,1)" rx="2" ry="2" />
<text  x="751.94" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,606,060,580 samples, 17.99%)</title><rect x="754.7" y="341" width="212.3" height="15.0" fill="rgb(240,208,45)" rx="2" ry="2" />
<text  x="757.70" y="351.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>BibopHeap::freeSmallObject (40,404,040 samples, 0.28%)</title><rect x="14.9" y="405" width="3.3" height="15.0" fill="rgb(213,60,52)" rx="2" ry="2" />
<text  x="17.94" y="415.5" ></text>
</g>
<g >
<title>xxfree (121,212,120 samples, 0.84%)</title><rect x="529.2" y="389" width="9.9" height="15.0" fill="rgb(223,200,36)" rx="2" ry="2" />
<text  x="532.23" y="399.5" ></text>
</g>
<g >
<title>operator new (2,474,747,450 samples, 17.09%)</title><rect x="541.6" y="405" width="201.6" height="15.0" fill="rgb(215,179,34)" rx="2" ry="2" />
<text  x="544.58" y="415.5" >operator new</text>
</g>
<g >
<title>heapinitialize (10,101,010 samples, 0.07%)</title><rect x="38.0" y="373" width="0.8" height="15.0" fill="rgb(245,159,35)" rx="2" ry="2" />
<text  x="40.98" y="383.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,606,060,580 samples, 17.99%)</title><rect x="754.7" y="389" width="212.3" height="15.0" fill="rgb(218,118,17)" rx="2" ry="2" />
<text  x="757.70" y="399.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="149" width="0.9" height="15.0" fill="rgb(243,141,23)" rx="2" ry="2" />
<text  x="697.63" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="389" width="7.4" height="15.0" fill="rgb(235,164,13)" rx="2" ry="2" />
<text  x="23.70" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="85" width="0.9" height="15.0" fill="rgb(217,98,50)" rx="2" ry="2" />
<text  x="697.63" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (40,404,040 samples, 0.28%)</title><rect x="692.2" y="181" width="3.3" height="15.0" fill="rgb(205,93,11)" rx="2" ry="2" />
<text  x="695.16" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="753.1" y="341" width="0.8" height="15.0" fill="rgb(238,97,50)" rx="2" ry="2" />
<text  x="756.05" y="351.5" ></text>
</g>
<g >
<title>xxmalloc (10,101,010 samples, 0.07%)</title><rect x="38.0" y="389" width="0.8" height="15.0" fill="rgb(209,25,21)" rx="2" ry="2" />
<text  x="40.98" y="399.5" ></text>
</g>
<g >
<title>swapper (5,343,434,290 samples, 36.89%)</title><rect x="754.7" y="421" width="435.3" height="15.0" fill="rgb(252,84,46)" rx="2" ry="2" />
<text  x="757.70" y="431.5" >swapper</text>
</g>
<g >
<title>pthread_spin_unlock@plt (20,202,020 samples, 0.14%)</title><rect x="731.7" y="389" width="1.6" height="15.0" fill="rgb(205,55,7)" rx="2" ry="2" />
<text  x="734.66" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="165" width="0.9" height="15.0" fill="rgb(234,111,19)" rx="2" ry="2" />
<text  x="697.63" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="37" width="0.9" height="15.0" fill="rgb(243,223,8)" rx="2" ry="2" />
<text  x="697.63" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (404,040,400 samples, 2.79%)</title><rect x="647.7" y="309" width="32.9" height="15.0" fill="rgb(254,120,14)" rx="2" ry="2" />
<text  x="650.73" y="319.5" >[[..</text>
</g>
<g >
<title>dirname (10,101,010 samples, 0.07%)</title><rect x="10.8" y="421" width="0.8" height="15.0" fill="rgb(218,76,52)" rx="2" ry="2" />
<text  x="13.82" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,606,060,580 samples, 17.99%)</title><rect x="754.7" y="357" width="212.3" height="15.0" fill="rgb(226,217,36)" rx="2" ry="2" />
<text  x="757.70" y="367.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>BibopHeap::allocateSmallObject (20,202,020 samples, 0.14%)</title><rect x="11.6" y="405" width="1.7" height="15.0" fill="rgb(210,40,54)" rx="2" ry="2" />
<text  x="14.65" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (181,818,180 samples, 1.26%)</title><rect x="680.6" y="357" width="14.9" height="15.0" fill="rgb(207,176,40)" rx="2" ry="2" />
<text  x="683.64" y="367.5" ></text>
</g>
<g >
<title>pthread_spin_lock (707,070,700 samples, 4.88%)</title><rect x="468.3" y="389" width="57.6" height="15.0" fill="rgb(239,83,0)" rx="2" ry="2" />
<text  x="471.34" y="399.5" >pthrea..</text>
</g>
<g >
<title>python3 (10,101,010 samples, 0.07%)</title><rect x="751.4" y="421" width="0.8" height="15.0" fill="rgb(224,93,36)" rx="2" ry="2" />
<text  x="754.41" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (10,101,010 samples, 0.07%)</title><rect x="694.6" y="133" width="0.9" height="15.0" fill="rgb(250,96,38)" rx="2" ry="2" />
<text  x="697.63" y="143.5" ></text>
</g>
<g >
<title>epoll_wait (10,101,010 samples, 0.07%)</title><rect x="753.1" y="405" width="0.8" height="15.0" fill="rgb(235,59,18)" rx="2" ry="2" />
<text  x="756.05" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (90,909,090 samples, 0.63%)</title><rect x="20.7" y="341" width="7.4" height="15.0" fill="rgb(225,74,44)" rx="2" ry="2" />
<text  x="23.70" y="351.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="752.2" y="405" width="0.9" height="15.0" fill="rgb(233,150,12)" rx="2" ry="2" />
<text  x="755.23" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (5,343,434,290 samples, 36.89%)</title><rect x="754.7" y="405" width="435.3" height="15.0" fill="rgb(226,107,8)" rx="2" ry="2" />
<text  x="757.70" y="415.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>quote_string (10,101,010 samples, 0.07%)</title><rect x="10.0" y="389" width="0.8" height="15.0" fill="rgb(206,105,30)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (636,363,630 samples, 4.39%)</title><rect x="628.8" y="341" width="51.8" height="15.0" fill="rgb(220,44,20)" rx="2" ry="2" />
<text  x="631.80" y="351.5" >[[ker..</text>
</g>
<g >
<title>xxmalloc (101,010,100 samples, 0.70%)</title><rect x="735.0" y="389" width="8.2" height="15.0" fill="rgb(223,134,22)" rx="2" ry="2" />
<text  x="737.95" y="399.5" ></text>
</g>
</g>
</svg>
