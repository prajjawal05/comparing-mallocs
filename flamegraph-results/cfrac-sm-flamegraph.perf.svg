<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.05%)</title><rect x="1119.1" y="53" width="0.6" height="15.0" fill="rgb(251,113,52)" rx="2" ry="2" />
<text  x="1122.08" y="63.5" ></text>
</g>
<g >
<title>__tls_get_addr (121,212,120 samples, 0.62%)</title><rect x="489.9" y="181" width="7.4" height="15.0" fill="rgb(233,154,24)" rx="2" ry="2" />
<text  x="492.95" y="191.5" ></text>
</g>
<g >
<title>do_idle (8,606,060,520 samples, 44.15%)</title><rect x="599.4" y="149" width="520.9" height="15.0" fill="rgb(254,104,15)" rx="2" ry="2" />
<text  x="602.39" y="159.5" >do_idle</text>
</g>
<g >
<title>__tls_get_addr (40,404,040 samples, 0.21%)</title><rect x="55.9" y="181" width="2.4" height="15.0" fill="rgb(249,179,49)" rx="2" ry="2" />
<text  x="58.85" y="191.5" ></text>
</g>
<g >
<title>maybe_initialize_malloc (111,111,110 samples, 0.57%)</title><rect x="472.2" y="197" width="6.7" height="15.0" fill="rgb(218,45,11)" rx="2" ry="2" />
<text  x="475.22" y="207.5" ></text>
</g>
<g >
<title>psub (272,727,270 samples, 1.40%)</title><rect x="430.6" y="181" width="16.6" height="15.0" fill="rgb(211,200,51)" rx="2" ry="2" />
<text  x="433.64" y="191.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="165" width="69.1" height="15.0" fill="rgb(225,47,24)" rx="2" ry="2" />
<text  x="1123.30" y="175.5" >x86_64_..</text>
</g>
<g >
<title>[cfrac] (30,303,030 samples, 0.16%)</title><rect x="20.4" y="181" width="1.8" height="15.0" fill="rgb(214,100,52)" rx="2" ry="2" />
<text  x="23.39" y="191.5" ></text>
</g>
<g >
<title>pimod (2,151,515,130 samples, 11.04%)</title><rect x="288.2" y="181" width="130.2" height="15.0" fill="rgb(242,9,17)" rx="2" ry="2" />
<text  x="291.19" y="191.5" >pimod</text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.21%)</title><rect x="36.3" y="181" width="2.4" height="15.0" fill="rgb(208,107,30)" rx="2" ry="2" />
<text  x="39.29" y="191.5" ></text>
</g>
<g >
<title>asm_sysvec_hyperv_callback (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="85" width="0.6" height="15.0" fill="rgb(222,155,34)" rx="2" ry="2" />
<text  x="1122.69" y="95.5" ></text>
</g>
<g >
<title>cached_free (10,101,010 samples, 0.05%)</title><rect x="36.3" y="149" width="0.6" height="15.0" fill="rgb(219,7,6)" rx="2" ry="2" />
<text  x="39.29" y="159.5" ></text>
</g>
<g >
<title>dl_main (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="165" width="0.6" height="15.0" fill="rgb(254,130,29)" rx="2" ry="2" />
<text  x="1192.39" y="175.5" ></text>
</g>
<g >
<title>pcmpz (30,303,030 samples, 0.16%)</title><rect x="235.6" y="181" width="1.8" height="15.0" fill="rgb(220,155,54)" rx="2" ry="2" />
<text  x="238.61" y="191.5" ></text>
</g>
<g >
<title>init_cache (60,606,060 samples, 0.31%)</title><rect x="74.8" y="181" width="3.7" height="15.0" fill="rgb(208,98,14)" rx="2" ry="2" />
<text  x="77.81" y="191.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="37" width="0.6" height="15.0" fill="rgb(212,187,15)" rx="2" ry="2" />
<text  x="1122.69" y="47.5" ></text>
</g>
<g >
<title>cached_free (90,909,090 samples, 0.47%)</title><rect x="453.9" y="197" width="5.5" height="15.0" fill="rgb(224,105,8)" rx="2" ry="2" />
<text  x="456.88" y="207.5" ></text>
</g>
<g >
<title>asm_sysvec_call_function_single (10,101,010 samples, 0.05%)</title><rect x="1119.1" y="85" width="0.6" height="15.0" fill="rgb(239,13,7)" rx="2" ry="2" />
<text  x="1122.08" y="95.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="37" width="69.1" height="15.0" fill="rgb(234,182,54)" rx="2" ry="2" />
<text  x="1123.30" y="47.5" >__cpuid..</text>
</g>
<g >
<title>pfree (10,101,010 samples, 0.05%)</title><rect x="36.9" y="149" width="0.6" height="15.0" fill="rgb(236,150,21)" rx="2" ry="2" />
<text  x="39.90" y="159.5" ></text>
</g>
<g >
<title>rtld_lock_default_lock_recursive (10,101,010 samples, 0.05%)</title><rect x="598.8" y="181" width="0.6" height="15.0" fill="rgb(247,5,53)" rx="2" ry="2" />
<text  x="601.78" y="191.5" ></text>
</g>
<g >
<title>padd (161,616,160 samples, 0.83%)</title><rect x="138.4" y="181" width="9.8" height="15.0" fill="rgb(229,11,22)" rx="2" ry="2" />
<text  x="141.39" y="191.5" ></text>
</g>
<g >
<title>phalf (40,404,040 samples, 0.21%)</title><rect x="269.2" y="181" width="2.5" height="15.0" fill="rgb(209,6,30)" rx="2" ry="2" />
<text  x="272.23" y="191.5" ></text>
</g>
<g >
<title>__pthread_setspecific (20,202,020 samples, 0.10%)</title><rect x="158.6" y="165" width="1.2" height="15.0" fill="rgb(217,200,15)" rx="2" ry="2" />
<text  x="161.57" y="175.5" ></text>
</g>
<g >
<title>cached_malloc (10,101,010 samples, 0.05%)</title><rect x="68.1" y="181" width="0.6" height="15.0" fill="rgb(236,41,15)" rx="2" ry="2" />
<text  x="71.08" y="191.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="1119.1" y="37" width="0.6" height="15.0" fill="rgb(216,67,18)" rx="2" ry="2" />
<text  x="1122.08" y="47.5" ></text>
</g>
<g >
<title>pmul (191,919,190 samples, 0.98%)</title><rect x="418.4" y="181" width="11.6" height="15.0" fill="rgb(218,192,35)" rx="2" ry="2" />
<text  x="421.41" y="191.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="181" width="0.6" height="15.0" fill="rgb(235,32,50)" rx="2" ry="2" />
<text  x="1192.39" y="191.5" ></text>
</g>
<g >
<title>object_base (929,292,920 samples, 4.77%)</title><rect x="82.1" y="181" width="56.3" height="15.0" fill="rgb(229,140,40)" rx="2" ry="2" />
<text  x="85.15" y="191.5" >objec..</text>
</g>
<g >
<title>rest_init (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="117" width="69.1" height="15.0" fill="rgb(234,16,11)" rx="2" ry="2" />
<text  x="1123.30" y="127.5" >rest_init</text>
</g>
<g >
<title>cached_malloc (505,050,500 samples, 2.59%)</title><rect x="497.3" y="181" width="30.6" height="15.0" fill="rgb(250,138,27)" rx="2" ry="2" />
<text  x="500.28" y="191.5" >ca..</text>
</g>
<g >
<title>__tls_get_addr (70,707,070 samples, 0.36%)</title><rect x="449.6" y="197" width="4.3" height="15.0" fill="rgb(215,101,4)" rx="2" ry="2" />
<text  x="452.60" y="207.5" ></text>
</g>
<g >
<title>pcmp (313,131,310 samples, 1.61%)</title><rect x="216.7" y="181" width="18.9" height="15.0" fill="rgb(207,91,43)" rx="2" ry="2" />
<text  x="219.65" y="191.5" ></text>
</g>
<g >
<title>time (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="213" width="0.6" height="15.0" fill="rgb(217,2,4)" rx="2" ry="2" />
<text  x="1192.39" y="223.5" ></text>
</g>
<g >
<title>default_idle_call (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="69" width="69.1" height="15.0" fill="rgb(234,40,26)" rx="2" ry="2" />
<text  x="1123.30" y="79.5" >default..</text>
</g>
<g >
<title>__pthread_setspecific (40,404,040 samples, 0.21%)</title><rect x="447.2" y="197" width="2.4" height="15.0" fill="rgb(241,54,3)" rx="2" ry="2" />
<text  x="450.15" y="207.5" ></text>
</g>
<g >
<title>free (101,010,100 samples, 0.52%)</title><rect x="68.7" y="181" width="6.1" height="15.0" fill="rgb(218,208,35)" rx="2" ry="2" />
<text  x="71.69" y="191.5" ></text>
</g>
<g >
<title>swapper (9,747,474,650 samples, 50.00%)</title><rect x="599.4" y="213" width="590.0" height="15.0" fill="rgb(216,135,1)" rx="2" ry="2" />
<text  x="602.39" y="223.5" >swapper</text>
</g>
<g >
<title>__pthread_setspecific (242,424,240 samples, 1.24%)</title><rect x="41.2" y="181" width="14.7" height="15.0" fill="rgb(248,73,10)" rx="2" ry="2" />
<text  x="44.18" y="191.5" ></text>
</g>
<g >
<title>arch_cpu_idle (8,595,959,510 samples, 44.09%)</title><rect x="599.4" y="117" width="520.3" height="15.0" fill="rgb(213,48,53)" rx="2" ry="2" />
<text  x="602.39" y="127.5" >arch_cpu_idle</text>
</g>
<g >
<title>arch_call_rest_init (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="133" width="69.1" height="15.0" fill="rgb(234,182,41)" rx="2" ry="2" />
<text  x="1123.30" y="143.5" >arch_ca..</text>
</g>
<g >
<title>all (19,494,949,300 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(247,188,36)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>[unknown] (7,050,504,980 samples, 36.17%)</title><rect x="20.4" y="197" width="426.8" height="15.0" fill="rgb(220,220,27)" rx="2" ry="2" />
<text  x="23.39" y="207.5" >[unknown]</text>
</g>
<g >
<title>maybe_initialize_malloc (50,505,050 samples, 0.26%)</title><rect x="79.1" y="181" width="3.0" height="15.0" fill="rgb(234,85,11)" rx="2" ry="2" />
<text  x="82.09" y="191.5" ></text>
</g>
<g >
<title>pfree (40,404,040 samples, 0.21%)</title><rect x="266.8" y="181" width="2.4" height="15.0" fill="rgb(228,167,36)" rx="2" ry="2" />
<text  x="269.79" y="191.5" ></text>
</g>
<g >
<title>[libsupermalloc.so] (232,323,230 samples, 1.19%)</title><rect x="22.2" y="181" width="14.1" height="15.0" fill="rgb(223,3,32)" rx="2" ry="2" />
<text  x="25.23" y="191.5" ></text>
</g>
<g >
<title>sysvec_hyperv_callback (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="69" width="0.6" height="15.0" fill="rgb(252,76,40)" rx="2" ry="2" />
<text  x="1122.69" y="79.5" ></text>
</g>
<g >
<title>__sched_text_start (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="117" width="0.6" height="15.0" fill="rgb(231,194,17)" rx="2" ry="2" />
<text  x="1122.69" y="127.5" ></text>
</g>
<g >
<title>pfactorQ (202,020,200 samples, 1.04%)</title><rect x="254.6" y="181" width="12.2" height="15.0" fill="rgb(233,160,19)" rx="2" ry="2" />
<text  x="257.56" y="191.5" ></text>
</g>
<g >
<title>init_cache (70,707,070 samples, 0.36%)</title><rect x="461.8" y="197" width="4.3" height="15.0" fill="rgb(221,39,43)" rx="2" ry="2" />
<text  x="464.82" y="207.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (9,747,474,650 samples, 50.00%)</title><rect x="599.4" y="197" width="590.0" height="15.0" fill="rgb(251,3,28)" rx="2" ry="2" />
<text  x="602.39" y="207.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>do_idle (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="85" width="69.1" height="15.0" fill="rgb(225,211,17)" rx="2" ry="2" />
<text  x="1123.30" y="95.5" >do_idle</text>
</g>
<g >
<title>podd (10,101,010 samples, 0.05%)</title><rect x="430.0" y="181" width="0.6" height="15.0" fill="rgb(252,199,9)" rx="2" ry="2" />
<text  x="433.03" y="191.5" ></text>
</g>
<g >
<title>palloc (919,191,910 samples, 4.72%)</title><rect x="148.2" y="181" width="55.6" height="15.0" fill="rgb(240,115,18)" rx="2" ry="2" />
<text  x="151.18" y="191.5" >palloc</text>
</g>
<g >
<title>pdivmod (282,828,280 samples, 1.45%)</title><rect x="237.4" y="181" width="17.2" height="15.0" fill="rgb(227,151,30)" rx="2" ry="2" />
<text  x="240.44" y="191.5" ></text>
</g>
<g >
<title>pdivmod (929,292,920 samples, 4.77%)</title><rect x="529.7" y="197" width="56.2" height="15.0" fill="rgb(228,163,25)" rx="2" ry="2" />
<text  x="532.69" y="207.5" >pdivmod</text>
</g>
<g >
<title>malloc (101,010,100 samples, 0.52%)</title><rect x="466.1" y="197" width="6.1" height="15.0" fill="rgb(226,75,43)" rx="2" ry="2" />
<text  x="469.10" y="207.5" ></text>
</g>
<g >
<title>__tls_get_addr (80,808,080 samples, 0.41%)</title><rect x="159.8" y="165" width="4.9" height="15.0" fill="rgb(209,97,34)" rx="2" ry="2" />
<text  x="162.79" y="175.5" ></text>
</g>
<g >
<title>start_kernel (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="149" width="69.1" height="15.0" fill="rgb(254,129,43)" rx="2" ry="2" />
<text  x="1123.30" y="159.5" >start_k..</text>
</g>
<g >
<title>size_2_bin (151,515,150 samples, 0.78%)</title><rect x="589.6" y="197" width="9.2" height="15.0" fill="rgb(237,171,39)" rx="2" ry="2" />
<text  x="592.61" y="207.5" ></text>
</g>
<g >
<title>pidiv (272,727,270 samples, 1.40%)</title><rect x="271.7" y="181" width="16.5" height="15.0" fill="rgb(241,97,13)" rx="2" ry="2" />
<text  x="274.68" y="191.5" ></text>
</g>
<g >
<title>pcfrac (212,121,210 samples, 1.09%)</title><rect x="203.8" y="181" width="12.9" height="15.0" fill="rgb(217,3,39)" rx="2" ry="2" />
<text  x="206.81" y="191.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="53" width="0.6" height="15.0" fill="rgb(251,9,15)" rx="2" ry="2" />
<text  x="1122.69" y="63.5" ></text>
</g>
<g >
<title>[libsupermalloc.so] (131,313,130 samples, 0.67%)</title><rect x="150.6" y="165" width="8.0" height="15.0" fill="rgb(246,55,8)" rx="2" ry="2" />
<text  x="153.62" y="175.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.05%)</title><rect x="1189.4" y="197" width="0.6" height="15.0" fill="rgb(210,119,23)" rx="2" ry="2" />
<text  x="1192.39" y="207.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="101" width="69.1" height="15.0" fill="rgb(252,176,6)" rx="2" ry="2" />
<text  x="1123.30" y="111.5" >cpu_sta..</text>
</g>
<g >
<title>combineSoln (20,202,020 samples, 0.10%)</title><rect x="37.5" y="165" width="1.2" height="15.0" fill="rgb(239,37,2)" rx="2" ry="2" />
<text  x="40.51" y="175.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.05%)</title><rect x="78.5" y="181" width="0.6" height="15.0" fill="rgb(243,158,23)" rx="2" ry="2" />
<text  x="81.48" y="191.5" ></text>
</g>
<g >
<title>[unknown] (20,202,020 samples, 0.10%)</title><rect x="36.3" y="165" width="1.2" height="15.0" fill="rgb(212,138,4)" rx="2" ry="2" />
<text  x="39.29" y="175.5" ></text>
</g>
<g >
<title>init_cache (60,606,060 samples, 0.31%)</title><rect x="200.1" y="165" width="3.7" height="15.0" fill="rgb(237,185,51)" rx="2" ry="2" />
<text  x="203.15" y="175.5" ></text>
</g>
<g >
<title>cfrac (9,727,272,630 samples, 49.90%)</title><rect x="10.0" y="213" width="588.8" height="15.0" fill="rgb(239,147,36)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >cfrac</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (40,404,040 samples, 0.21%)</title><rect x="38.7" y="181" width="2.5" height="15.0" fill="rgb(226,86,54)" rx="2" ry="2" />
<text  x="41.74" y="191.5" ></text>
</g>
<g >
<title>schedule_idle (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="133" width="0.6" height="15.0" fill="rgb(247,100,31)" rx="2" ry="2" />
<text  x="1122.69" y="143.5" ></text>
</g>
<g >
<title>__run_exit_handlers (10,101,010 samples, 0.05%)</title><rect x="598.8" y="197" width="0.6" height="15.0" fill="rgb(231,109,50)" rx="2" ry="2" />
<text  x="601.78" y="207.5" ></text>
</g>
<g >
<title>dirname (10,101,010 samples, 0.05%)</title><rect x="598.8" y="213" width="0.6" height="15.0" fill="rgb(243,132,13)" rx="2" ry="2" />
<text  x="601.78" y="223.5" ></text>
</g>
<g >
<title>[cfrac] (60,606,060 samples, 0.31%)</title><rect x="10.0" y="197" width="3.7" height="15.0" fill="rgb(248,143,27)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>init_cache (30,303,030 samples, 0.16%)</title><rect x="527.9" y="181" width="1.8" height="15.0" fill="rgb(227,188,29)" rx="2" ry="2" />
<text  x="530.85" y="191.5" ></text>
</g>
<g >
<title>pfree (60,606,060 samples, 0.31%)</title><rect x="585.9" y="197" width="3.7" height="15.0" fill="rgb(208,126,5)" rx="2" ry="2" />
<text  x="588.94" y="207.5" ></text>
</g>
<g >
<title>finish_task_switch (10,101,010 samples, 0.05%)</title><rect x="1119.7" y="101" width="0.6" height="15.0" fill="rgb(237,19,27)" rx="2" ry="2" />
<text  x="1122.69" y="111.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (8,595,959,510 samples, 44.09%)</title><rect x="599.4" y="101" width="520.3" height="15.0" fill="rgb(209,103,12)" rx="2" ry="2" />
<text  x="602.39" y="111.5" >__cpuidle_text_start</text>
</g>
<g >
<title>start_secondary (8,606,060,520 samples, 44.15%)</title><rect x="599.4" y="181" width="520.9" height="15.0" fill="rgb(218,210,31)" rx="2" ry="2" />
<text  x="602.39" y="191.5" >start_secondary</text>
</g>
<g >
<title>x86_64_start_kernel (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="181" width="69.1" height="15.0" fill="rgb(233,91,45)" rx="2" ry="2" />
<text  x="1123.30" y="191.5" >x86_64_..</text>
</g>
<g >
<title>palloc (838,383,830 samples, 4.30%)</title><rect x="478.9" y="197" width="50.8" height="15.0" fill="rgb(209,39,13)" rx="2" ry="2" />
<text  x="481.94" y="207.5" >palloc</text>
</g>
<g >
<title>arch_cpu_idle (1,141,414,130 samples, 5.85%)</title><rect x="1120.3" y="53" width="69.1" height="15.0" fill="rgb(209,153,7)" rx="2" ry="2" />
<text  x="1123.30" y="63.5" >arch_cp..</text>
</g>
<g >
<title>cached_malloc (40,404,040 samples, 0.21%)</title><rect x="459.4" y="197" width="2.4" height="15.0" fill="rgb(223,172,32)" rx="2" ry="2" />
<text  x="462.38" y="207.5" ></text>
</g>
<g >
<title>[libsupermalloc.so] (131,313,130 samples, 0.67%)</title><rect x="482.0" y="181" width="7.9" height="15.0" fill="rgb(216,100,31)" rx="2" ry="2" />
<text  x="485.00" y="191.5" ></text>
</g>
<g >
<title>sysvec_call_function_single (10,101,010 samples, 0.05%)</title><rect x="1119.1" y="69" width="0.6" height="15.0" fill="rgb(240,103,33)" rx="2" ry="2" />
<text  x="1122.08" y="79.5" ></text>
</g>
<g >
<title>cpu_startup_entry (8,606,060,520 samples, 44.15%)</title><rect x="599.4" y="165" width="520.9" height="15.0" fill="rgb(210,207,3)" rx="2" ry="2" />
<text  x="602.39" y="175.5" >cpu_startup_entry</text>
</g>
<g >
<title>default_idle_call (8,595,959,510 samples, 44.09%)</title><rect x="599.4" y="133" width="520.3" height="15.0" fill="rgb(205,152,23)" rx="2" ry="2" />
<text  x="602.39" y="143.5" >default_idle_call</text>
</g>
<g >
<title>cached_free (161,616,160 samples, 0.83%)</title><rect x="58.3" y="181" width="9.8" height="15.0" fill="rgb(224,89,9)" rx="2" ry="2" />
<text  x="61.30" y="191.5" ></text>
</g>
<g >
<title>[libsupermalloc.so] (111,111,110 samples, 0.57%)</title><rect x="13.7" y="197" width="6.7" height="15.0" fill="rgb(240,139,1)" rx="2" ry="2" />
<text  x="16.67" y="207.5" ></text>
</g>
<g >
<title>cached_malloc (585,858,580 samples, 3.01%)</title><rect x="164.7" y="165" width="35.4" height="15.0" fill="rgb(245,157,50)" rx="2" ry="2" />
<text  x="167.68" y="175.5" >cac..</text>
</g>
</g>
</svg>
