<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>do_mmap (10,101,010 samples, 0.07%)</title><rect x="263.8" y="149" width="0.9" height="15.0" fill="rgb(252,149,14)" rx="2" ry="2" />
<text  x="266.82" y="159.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="213" width="168.1" height="15.0" fill="rgb(230,150,5)" rx="2" ry="2" />
<text  x="1024.07" y="223.5" >x86_64_start_reservat..</text>
</g>
<g >
<title>__strcmp_avx2 (10,101,010 samples, 0.07%)</title><rect x="10.8" y="245" width="0.9" height="15.0" fill="rgb(240,205,41)" rx="2" ry="2" />
<text  x="13.84" y="255.5" ></text>
</g>
<g >
<title>arch_cpu_idle (2,060,606,040 samples, 14.53%)</title><rect x="849.6" y="165" width="171.5" height="15.0" fill="rgb(208,97,19)" rx="2" ry="2" />
<text  x="852.62" y="175.5" >arch_cpu_idle</text>
</g>
<g >
<title>path_openat (10,101,010 samples, 0.07%)</title><rect x="10.0" y="101" width="0.8" height="15.0" fill="rgb(214,107,17)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>do_open.isra.0 (10,101,010 samples, 0.07%)</title><rect x="10.0" y="85" width="0.8" height="15.0" fill="rgb(216,85,53)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>schedule_idle (10,101,010 samples, 0.07%)</title><rect x="1188.3" y="117" width="0.9" height="15.0" fill="rgb(213,165,45)" rx="2" ry="2" />
<text  x="1191.32" y="127.5" ></text>
</g>
<g >
<title>free (111,111,110 samples, 0.78%)</title><rect x="550.4" y="245" width="9.3" height="15.0" fill="rgb(248,70,38)" rx="2" ry="2" />
<text  x="553.41" y="255.5" ></text>
</g>
<g >
<title>[libsupermalloc.so] (101,010,100 samples, 0.71%)</title><rect x="97.4" y="213" width="8.4" height="15.0" fill="rgb(214,119,2)" rx="2" ry="2" />
<text  x="100.41" y="223.5" ></text>
</g>
<g >
<title>do_mmap (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="149" width="0.8" height="15.0" fill="rgb(254,213,43)" rx="2" ry="2" />
<text  x="1192.16" y="159.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="213" width="0.8" height="15.0" fill="rgb(251,34,40)" rx="2" ry="2" />
<text  x="1192.16" y="223.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.07%)</title><rect x="1020.2" y="101" width="0.9" height="15.0" fill="rgb(214,64,51)" rx="2" ry="2" />
<text  x="1023.23" y="111.5" ></text>
</g>
<g >
<title>small_free (10,101,010 samples, 0.07%)</title><rect x="846.3" y="245" width="0.8" height="15.0" fill="rgb(210,105,2)" rx="2" ry="2" />
<text  x="849.25" y="255.5" ></text>
</g>
<g >
<title>size_2_bin (292,929,290 samples, 2.07%)</title><rect x="821.9" y="245" width="24.4" height="15.0" fill="rgb(226,146,3)" rx="2" ry="2" />
<text  x="824.88" y="255.5" >s..</text>
</g>
<g >
<title>x86_64_start_kernel (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="229" width="168.1" height="15.0" fill="rgb(236,117,18)" rx="2" ry="2" />
<text  x="1024.07" y="239.5" >x86_64_start_kernel</text>
</g>
<g >
<title>mmap_region (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="133" width="0.8" height="15.0" fill="rgb(231,202,20)" rx="2" ry="2" />
<text  x="1192.16" y="143.5" ></text>
</g>
<g >
<title>[unknown] (1,222,222,210 samples, 8.62%)</title><rect x="97.4" y="229" width="101.7" height="15.0" fill="rgb(218,121,39)" rx="2" ry="2" />
<text  x="100.41" y="239.5" >[unknown]</text>
</g>
<g >
<title>sysvec_hyperv_stimer0 (10,101,010 samples, 0.07%)</title><rect x="1020.2" y="117" width="0.9" height="15.0" fill="rgb(219,128,30)" rx="2" ry="2" />
<text  x="1023.23" y="127.5" ></text>
</g>
<g >
<title>rest_init (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="165" width="168.1" height="15.0" fill="rgb(247,207,5)" rx="2" ry="2" />
<text  x="1024.07" y="175.5" >rest_init</text>
</g>
<g >
<title>vm_mmap_pgoff (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="165" width="0.8" height="15.0" fill="rgb(247,57,46)" rx="2" ry="2" />
<text  x="1192.16" y="175.5" ></text>
</g>
<g >
<title>all (14,181,818,040 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(249,155,19)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>larson-sized (10,050,504,950 samples, 70.87%)</title><rect x="12.5" y="261" width="836.3" height="15.0" fill="rgb(230,120,21)" rx="2" ry="2" />
<text  x="15.52" y="271.5" >larson-sized</text>
</g>
<g >
<title>[libsupermalloc.so] (525,252,520 samples, 3.70%)</title><rect x="53.7" y="245" width="43.7" height="15.0" fill="rgb(215,12,25)" rx="2" ry="2" />
<text  x="56.70" y="255.5" >[lib..</text>
</g>
<g >
<title>__x64_sys_clone (10,101,010 samples, 0.07%)</title><rect x="199.1" y="181" width="0.8" height="15.0" fill="rgb(216,42,9)" rx="2" ry="2" />
<text  x="202.10" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (343,434,340 samples, 2.42%)</title><rect x="25.1" y="245" width="28.6" height="15.0" fill="rgb(253,156,45)" rx="2" ry="2" />
<text  x="28.13" y="255.5" >[l..</text>
</g>
<g >
<title>do_user_addr_fault (20,202,020 samples, 0.14%)</title><rect x="847.1" y="197" width="1.7" height="15.0" fill="rgb(245,154,15)" rx="2" ry="2" />
<text  x="850.09" y="207.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.07%)</title><rect x="10.0" y="245" width="0.8" height="15.0" fill="rgb(219,108,43)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.07%)</title><rect x="263.8" y="213" width="0.9" height="15.0" fill="rgb(217,192,42)" rx="2" ry="2" />
<text  x="266.82" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_hyperv_stimer0 (10,101,010 samples, 0.07%)</title><rect x="1020.2" y="133" width="0.9" height="15.0" fill="rgb(238,205,48)" rx="2" ry="2" />
<text  x="1023.23" y="143.5" ></text>
</g>
<g >
<title>vfs_open (10,101,010 samples, 0.07%)</title><rect x="10.0" y="69" width="0.8" height="15.0" fill="rgb(233,100,8)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>do_open_execat (10,101,010 samples, 0.07%)</title><rect x="10.0" y="133" width="0.8" height="15.0" fill="rgb(241,3,45)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>swapper (4,080,808,040 samples, 28.77%)</title><rect x="849.6" y="261" width="339.6" height="15.0" fill="rgb(244,161,18)" rx="2" ry="2" />
<text  x="852.62" y="271.5" >swapper</text>
</g>
<g >
<title>bprm_execve (10,101,010 samples, 0.07%)</title><rect x="10.0" y="149" width="0.8" height="15.0" fill="rgb(225,99,34)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>__pthread_setspecific (181,818,180 samples, 1.28%)</title><rect x="674.0" y="229" width="15.1" height="15.0" fill="rgb(219,217,39)" rx="2" ry="2" />
<text  x="676.96" y="239.5" ></text>
</g>
<g >
<title>arch_cpu_idle (2,010,100,990 samples, 14.17%)</title><rect x="1021.1" y="101" width="167.2" height="15.0" fill="rgb(208,112,35)" rx="2" ry="2" />
<text  x="1024.07" y="111.5" >arch_cpu_idle</text>
</g>
<g >
<title>cpu_startup_entry (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="149" width="168.1" height="15.0" fill="rgb(245,198,12)" rx="2" ry="2" />
<text  x="1024.07" y="159.5" >cpu_startup_entry</text>
</g>
<g >
<title>operator delete (40,404,040 samples, 0.28%)</title><rect x="619.3" y="245" width="3.4" height="15.0" fill="rgb(238,115,31)" rx="2" ry="2" />
<text  x="622.33" y="255.5" ></text>
</g>
<g >
<title>sched_getcpu (10,101,010 samples, 0.07%)</title><rect x="263.0" y="229" width="0.8" height="15.0" fill="rgb(206,34,8)" rx="2" ry="2" />
<text  x="265.98" y="239.5" ></text>
</g>
<g >
<title>free (20,202,020 samples, 0.14%)</title><rect x="253.7" y="229" width="1.7" height="15.0" fill="rgb(213,18,0)" rx="2" ry="2" />
<text  x="256.73" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.07%)</title><rect x="10.0" y="197" width="0.8" height="15.0" fill="rgb(224,119,6)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.07%)</title><rect x="1020.2" y="85" width="0.9" height="15.0" fill="rgb(230,97,28)" rx="2" ry="2" />
<text  x="1023.23" y="95.5" ></text>
</g>
<g >
<title>get_unmapped_area (10,101,010 samples, 0.07%)</title><rect x="263.8" y="133" width="0.9" height="15.0" fill="rgb(246,167,10)" rx="2" ry="2" />
<text  x="266.82" y="143.5" ></text>
</g>
<g >
<title>maybe_initialize_malloc (20,202,020 samples, 0.14%)</title><rect x="255.4" y="229" width="1.7" height="15.0" fill="rgb(250,132,44)" rx="2" ry="2" />
<text  x="258.41" y="239.5" ></text>
</g>
<g >
<title>runthreads (10,101,010 samples, 0.07%)</title><rect x="198.3" y="213" width="0.8" height="15.0" fill="rgb(239,108,49)" rx="2" ry="2" />
<text  x="201.26" y="223.5" ></text>
</g>
<g >
<title>operator new[] (70,707,070 samples, 0.50%)</title><rect x="816.0" y="245" width="5.9" height="15.0" fill="rgb(237,153,17)" rx="2" ry="2" />
<text  x="819.00" y="255.5" ></text>
</g>
<g >
<title>get_page_from_freelist (20,202,020 samples, 0.14%)</title><rect x="847.1" y="101" width="1.7" height="15.0" fill="rgb(243,109,15)" rx="2" ry="2" />
<text  x="850.09" y="111.5" ></text>
</g>
<g >
<title>maybe_initialize_malloc (70,707,070 samples, 0.50%)</title><rect x="613.4" y="245" width="5.9" height="15.0" fill="rgb(243,32,5)" rx="2" ry="2" />
<text  x="616.45" y="255.5" ></text>
</g>
<g >
<title>clear_page_erms (20,202,020 samples, 0.14%)</title><rect x="847.1" y="69" width="1.7" height="15.0" fill="rgb(212,114,46)" rx="2" ry="2" />
<text  x="850.09" y="79.5" ></text>
</g>
<g >
<title>object_base (40,404,040 samples, 0.28%)</title><rect x="257.1" y="229" width="3.4" height="15.0" fill="rgb(237,137,42)" rx="2" ry="2" />
<text  x="260.09" y="239.5" ></text>
</g>
<g >
<title>runthreads (20,202,020 samples, 0.14%)</title><rect x="261.3" y="229" width="1.7" height="15.0" fill="rgb(232,108,22)" rx="2" ry="2" />
<text  x="264.30" y="239.5" ></text>
</g>
<g >
<title>operator new (2,191,919,170 samples, 15.46%)</title><rect x="633.6" y="245" width="182.4" height="15.0" fill="rgb(231,108,15)" rx="2" ry="2" />
<text  x="636.62" y="255.5" >operator new</text>
</g>
<g >
<title>init_cache (191,919,190 samples, 1.35%)</title><rect x="559.7" y="245" width="15.9" height="15.0" fill="rgb(239,2,6)" rx="2" ry="2" />
<text  x="562.66" y="255.5" ></text>
</g>
<g >
<title>copy_process (10,101,010 samples, 0.07%)</title><rect x="199.1" y="133" width="0.8" height="15.0" fill="rgb(245,127,17)" rx="2" ry="2" />
<text  x="202.10" y="143.5" ></text>
</g>
<g >
<title>tee (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="261" width="0.8" height="15.0" fill="rgb(217,58,6)" rx="2" ry="2" />
<text  x="1192.16" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.07%)</title><rect x="263.8" y="229" width="0.9" height="15.0" fill="rgb(220,193,17)" rx="2" ry="2" />
<text  x="266.82" y="239.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (10,101,010 samples, 0.07%)</title><rect x="10.8" y="229" width="0.9" height="15.0" fill="rgb(230,29,2)" rx="2" ry="2" />
<text  x="13.84" y="239.5" ></text>
</g>
<g >
<title>malloc (454,545,450 samples, 3.21%)</title><rect x="575.6" y="245" width="37.8" height="15.0" fill="rgb(212,94,48)" rx="2" ry="2" />
<text  x="578.63" y="255.5" >mal..</text>
</g>
<g >
<title>cached_malloc (121,212,120 samples, 0.85%)</title><rect x="403.3" y="245" width="10.1" height="15.0" fill="rgb(236,28,48)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (2,060,606,040 samples, 14.53%)</title><rect x="849.6" y="149" width="171.5" height="15.0" fill="rgb(210,215,17)" rx="2" ry="2" />
<text  x="852.62" y="159.5" >__cpuidle_text_start</text>
</g>
<g >
<title>mmap64 (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="245" width="0.8" height="15.0" fill="rgb(217,32,17)" rx="2" ry="2" />
<text  x="1192.16" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.07%)</title><rect x="199.1" y="213" width="0.8" height="15.0" fill="rgb(230,22,23)" rx="2" ry="2" />
<text  x="202.10" y="223.5" ></text>
</g>
<g >
<title>__alloc_pages (20,202,020 samples, 0.14%)</title><rect x="847.1" y="117" width="1.7" height="15.0" fill="rgb(232,64,11)" rx="2" ry="2" />
<text  x="850.09" y="127.5" ></text>
</g>
<g >
<title>do_idle (2,060,606,040 samples, 14.53%)</title><rect x="849.6" y="197" width="171.5" height="15.0" fill="rgb(229,44,15)" rx="2" ry="2" />
<text  x="852.62" y="207.5" >do_idle</text>
</g>
<g >
<title>exc_page_fault (10,101,010 samples, 0.07%)</title><rect x="10.8" y="213" width="0.9" height="15.0" fill="rgb(210,223,6)" rx="2" ry="2" />
<text  x="13.84" y="223.5" ></text>
</g>
<g >
<title>kernel_clone (10,101,010 samples, 0.07%)</title><rect x="199.1" y="149" width="0.8" height="15.0" fill="rgb(222,120,27)" rx="2" ry="2" />
<text  x="202.10" y="159.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2,060,606,040 samples, 14.53%)</title><rect x="849.6" y="213" width="171.5" height="15.0" fill="rgb(240,93,31)" rx="2" ry="2" />
<text  x="852.62" y="223.5" >cpu_startup_entry</text>
</g>
<g >
<title>finish_task_switch (10,101,010 samples, 0.07%)</title><rect x="1188.3" y="85" width="0.9" height="15.0" fill="rgb(233,219,22)" rx="2" ry="2" />
<text  x="1191.32" y="95.5" ></text>
</g>
<g >
<title>cached_free (868,686,860 samples, 6.13%)</title><rect x="331.1" y="245" width="72.2" height="15.0" fill="rgb(232,214,0)" rx="2" ry="2" />
<text  x="334.05" y="255.5" >cached_f..</text>
</g>
<g >
<title>default_idle_call (2,060,606,040 samples, 14.53%)</title><rect x="849.6" y="181" width="171.5" height="15.0" fill="rgb(240,68,37)" rx="2" ry="2" />
<text  x="852.62" y="191.5" >default_idle_call</text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.07%)</title><rect x="199.1" y="197" width="0.8" height="15.0" fill="rgb(226,141,38)" rx="2" ry="2" />
<text  x="202.10" y="207.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.14%)</title><rect x="847.1" y="181" width="1.7" height="15.0" fill="rgb(244,225,8)" rx="2" ry="2" />
<text  x="850.09" y="191.5" ></text>
</g>
<g >
<title>maybe_initialize_malloc (222,222,220 samples, 1.57%)</title><rect x="124.3" y="213" width="18.5" height="15.0" fill="rgb(240,47,0)" rx="2" ry="2" />
<text  x="127.30" y="223.5" ></text>
</g>
<g >
<title>evlist__poll (10,101,010 samples, 0.07%)</title><rect x="848.8" y="229" width="0.8" height="15.0" fill="rgb(213,110,35)" rx="2" ry="2" />
<text  x="851.77" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="197" width="0.8" height="15.0" fill="rgb(224,92,29)" rx="2" ry="2" />
<text  x="1192.16" y="207.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown (10,101,010 samples, 0.07%)</title><rect x="263.8" y="117" width="0.9" height="15.0" fill="rgb(238,177,40)" rx="2" ry="2" />
<text  x="266.82" y="127.5" ></text>
</g>
<g >
<title>memset_erms (10,101,010 samples, 0.07%)</title><rect x="199.1" y="117" width="0.8" height="15.0" fill="rgb(227,120,54)" rx="2" ry="2" />
<text  x="202.10" y="127.5" ></text>
</g>
<g >
<title>prep_new_page (20,202,020 samples, 0.14%)</title><rect x="847.1" y="85" width="1.7" height="15.0" fill="rgb(246,183,53)" rx="2" ry="2" />
<text  x="850.09" y="95.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.07%)</title><rect x="10.8" y="197" width="0.9" height="15.0" fill="rgb(237,134,31)" rx="2" ry="2" />
<text  x="13.84" y="207.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.07%)</title><rect x="260.5" y="229" width="0.8" height="15.0" fill="rgb(253,113,4)" rx="2" ry="2" />
<text  x="263.46" y="239.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (10,101,010 samples, 0.07%)</title><rect x="10.0" y="165" width="0.8" height="15.0" fill="rgb(218,134,10)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>[larson-sized] (151,515,150 samples, 1.07%)</title><rect x="12.5" y="245" width="12.6" height="15.0" fill="rgb(247,7,26)" rx="2" ry="2" />
<text  x="15.52" y="255.5" ></text>
</g>
<g >
<title>object_base (666,666,660 samples, 4.70%)</title><rect x="142.8" y="213" width="55.5" height="15.0" fill="rgb(233,91,37)" rx="2" ry="2" />
<text  x="145.79" y="223.5" >objec..</text>
</g>
<g >
<title>__x64_sys_mmap (10,101,010 samples, 0.07%)</title><rect x="263.8" y="197" width="0.9" height="15.0" fill="rgb(228,129,47)" rx="2" ry="2" />
<text  x="266.82" y="207.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (10,101,010 samples, 0.07%)</title><rect x="263.8" y="165" width="0.9" height="15.0" fill="rgb(215,205,53)" rx="2" ry="2" />
<text  x="266.82" y="175.5" ></text>
</g>
<g >
<title>__do_sys_clone (10,101,010 samples, 0.07%)</title><rect x="199.1" y="165" width="0.8" height="15.0" fill="rgb(226,84,29)" rx="2" ry="2" />
<text  x="202.10" y="175.5" ></text>
</g>
<g >
<title>operator delete[] (131,313,130 samples, 0.93%)</title><rect x="622.7" y="245" width="10.9" height="15.0" fill="rgb(238,158,50)" rx="2" ry="2" />
<text  x="625.69" y="255.5" ></text>
</g>
<g >
<title>small_malloc (20,202,020 samples, 0.14%)</title><rect x="847.1" y="245" width="1.7" height="15.0" fill="rgb(240,68,17)" rx="2" ry="2" />
<text  x="850.09" y="255.5" ></text>
</g>
<g >
<title>do_fault (10,101,010 samples, 0.07%)</title><rect x="10.8" y="149" width="0.9" height="15.0" fill="rgb(211,62,11)" rx="2" ry="2" />
<text  x="13.84" y="159.5" ></text>
</g>
<g >
<title>__strlen_avx2 (10,101,010 samples, 0.07%)</title><rect x="11.7" y="245" width="0.8" height="15.0" fill="rgb(225,67,28)" rx="2" ry="2" />
<text  x="14.68" y="255.5" ></text>
</g>
<g >
<title>arch_call_rest_init (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="181" width="168.1" height="15.0" fill="rgb(208,150,32)" rx="2" ry="2" />
<text  x="1024.07" y="191.5" >arch_call_rest_init</text>
</g>
<g >
<title>__mmap (10,101,010 samples, 0.07%)</title><rect x="263.8" y="245" width="0.9" height="15.0" fill="rgb(224,68,35)" rx="2" ry="2" />
<text  x="266.82" y="255.5" ></text>
</g>
<g >
<title>__tls_get_addr (595,959,590 samples, 4.20%)</title><rect x="281.5" y="245" width="49.6" height="15.0" fill="rgb(213,0,42)" rx="2" ry="2" />
<text  x="284.47" y="255.5" >__tls..</text>
</g>
<g >
<title>start_thread (10,101,010 samples, 0.07%)</title><rect x="848.8" y="245" width="0.8" height="15.0" fill="rgb(210,84,9)" rx="2" ry="2" />
<text  x="851.77" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.07%)</title><rect x="10.8" y="165" width="0.9" height="15.0" fill="rgb(225,202,35)" rx="2" ry="2" />
<text  x="13.84" y="175.5" ></text>
</g>
<g >
<title>alloc_pages_vma (20,202,020 samples, 0.14%)</title><rect x="847.1" y="133" width="1.7" height="15.0" fill="rgb(250,86,47)" rx="2" ry="2" />
<text  x="850.09" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="229" width="0.8" height="15.0" fill="rgb(243,107,46)" rx="2" ry="2" />
<text  x="1192.16" y="239.5" ></text>
</g>
<g >
<title>exercise_heap (1,646,464,630 samples, 11.61%)</title><rect x="413.4" y="245" width="137.0" height="15.0" fill="rgb(230,121,1)" rx="2" ry="2" />
<text  x="416.42" y="255.5" >exercise_heap</text>
</g>
<g >
<title>__cpuidle_text_start (2,010,100,990 samples, 14.17%)</title><rect x="1021.1" y="85" width="167.2" height="15.0" fill="rgb(236,90,40)" rx="2" ry="2" />
<text  x="1024.07" y="95.5" >__cpuidle_text_start</text>
</g>
<g >
<title>exc_page_fault (20,202,020 samples, 0.14%)</title><rect x="847.1" y="213" width="1.7" height="15.0" fill="rgb(234,152,51)" rx="2" ry="2" />
<text  x="850.09" y="223.5" ></text>
</g>
<g >
<title>vm_unmapped_area (10,101,010 samples, 0.07%)</title><rect x="263.8" y="101" width="0.9" height="15.0" fill="rgb(239,7,31)" rx="2" ry="2" />
<text  x="266.82" y="111.5" ></text>
</g>
<g >
<title>filemap_map_pages (10,101,010 samples, 0.07%)</title><rect x="10.8" y="133" width="0.9" height="15.0" fill="rgb(220,71,44)" rx="2" ry="2" />
<text  x="13.84" y="143.5" ></text>
</g>
<g >
<title>cached_malloc (10,101,010 samples, 0.07%)</title><rect x="260.5" y="213" width="0.8" height="15.0" fill="rgb(240,147,15)" rx="2" ry="2" />
<text  x="263.46" y="223.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (10,101,010 samples, 0.07%)</title><rect x="1189.2" y="181" width="0.8" height="15.0" fill="rgb(232,30,28)" rx="2" ry="2" />
<text  x="1192.16" y="191.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (10,101,010 samples, 0.07%)</title><rect x="263.8" y="181" width="0.9" height="15.0" fill="rgb(222,158,53)" rx="2" ry="2" />
<text  x="266.82" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.07%)</title><rect x="10.8" y="181" width="0.9" height="15.0" fill="rgb(217,81,0)" rx="2" ry="2" />
<text  x="13.84" y="191.5" ></text>
</g>
<g >
<title>bench.sh (10,101,010 samples, 0.07%)</title><rect x="10.0" y="261" width="0.8" height="15.0" fill="rgb(208,65,5)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (20,202,020 samples, 0.14%)</title><rect x="847.1" y="229" width="1.7" height="15.0" fill="rgb(223,156,41)" rx="2" ry="2" />
<text  x="850.09" y="239.5" ></text>
</g>
<g >
<title>small_malloc (10,101,010 samples, 0.07%)</title><rect x="815.2" y="229" width="0.8" height="15.0" fill="rgb(205,209,10)" rx="2" ry="2" />
<text  x="818.16" y="239.5" ></text>
</g>
<g >
<title>[unknown] (1,999,999,980 samples, 14.10%)</title><rect x="97.4" y="245" width="166.4" height="15.0" fill="rgb(227,145,37)" rx="2" ry="2" />
<text  x="100.41" y="255.5" >[unknown]</text>
</g>
<g >
<title>__clone (10,101,010 samples, 0.07%)</title><rect x="199.1" y="229" width="0.8" height="15.0" fill="rgb(245,153,51)" rx="2" ry="2" />
<text  x="202.10" y="239.5" ></text>
</g>
<g >
<title>do_filp_open (10,101,010 samples, 0.07%)</title><rect x="10.0" y="117" width="0.8" height="15.0" fill="rgb(253,78,33)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>do_idle (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="133" width="168.1" height="15.0" fill="rgb(249,143,26)" rx="2" ry="2" />
<text  x="1024.07" y="143.5" >do_idle</text>
</g>
<g >
<title>start_secondary (2,060,606,040 samples, 14.53%)</title><rect x="849.6" y="229" width="171.5" height="15.0" fill="rgb(242,25,26)" rx="2" ry="2" />
<text  x="852.62" y="239.5" >start_secondary</text>
</g>
<g >
<title>__GI___execve (10,101,010 samples, 0.07%)</title><rect x="10.0" y="229" width="0.8" height="15.0" fill="rgb(250,111,1)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>__pthread_setspecific (646,464,640 samples, 4.56%)</title><rect x="199.9" y="229" width="53.8" height="15.0" fill="rgb(249,164,50)" rx="2" ry="2" />
<text  x="202.94" y="239.5" >__pth..</text>
</g>
<g >
<title>do_huge_pmd_anonymous_page (20,202,020 samples, 0.14%)</title><rect x="847.1" y="149" width="1.7" height="15.0" fill="rgb(238,118,42)" rx="2" ry="2" />
<text  x="850.09" y="159.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (4,080,808,040 samples, 28.77%)</title><rect x="849.6" y="245" width="339.6" height="15.0" fill="rgb(235,79,48)" rx="2" ry="2" />
<text  x="852.62" y="255.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>cat (10,101,010 samples, 0.07%)</title><rect x="10.8" y="261" width="0.9" height="15.0" fill="rgb(245,76,54)" rx="2" ry="2" />
<text  x="13.84" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_execve (10,101,010 samples, 0.07%)</title><rect x="10.0" y="181" width="0.8" height="15.0" fill="rgb(229,24,38)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>__pthread_setspecific (202,020,200 samples, 1.42%)</title><rect x="264.7" y="245" width="16.8" height="15.0" fill="rgb(214,37,10)" rx="2" ry="2" />
<text  x="267.66" y="255.5" ></text>
</g>
<g >
<title>cached_malloc (878,787,870 samples, 6.20%)</title><rect x="732.0" y="229" width="73.1" height="15.0" fill="rgb(246,160,22)" rx="2" ry="2" />
<text  x="734.95" y="239.5" >cached_m..</text>
</g>
<g >
<title>start_kernel (2,020,202,000 samples, 14.25%)</title><rect x="1021.1" y="197" width="168.1" height="15.0" fill="rgb(219,100,34)" rx="2" ry="2" />
<text  x="1024.07" y="207.5" >start_kernel</text>
</g>
<g >
<title>__tls_get_addr (515,151,510 samples, 3.63%)</title><rect x="689.1" y="229" width="42.9" height="15.0" fill="rgb(215,101,33)" rx="2" ry="2" />
<text  x="692.09" y="239.5" >__tl..</text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.14%)</title><rect x="847.1" y="165" width="1.7" height="15.0" fill="rgb(232,12,17)" rx="2" ry="2" />
<text  x="850.09" y="175.5" ></text>
</g>
<g >
<title>perf (10,101,010 samples, 0.07%)</title><rect x="848.8" y="261" width="0.8" height="15.0" fill="rgb(221,124,36)" rx="2" ry="2" />
<text  x="851.77" y="271.5" ></text>
</g>
<g >
<title>file_ra_state_init (10,101,010 samples, 0.07%)</title><rect x="10.0" y="37" width="0.8" height="15.0" fill="rgb(207,96,43)" rx="2" ry="2" />
<text  x="13.00" y="47.5" ></text>
</g>
<g >
<title>init_cache (121,212,120 samples, 0.85%)</title><rect x="805.1" y="229" width="10.1" height="15.0" fill="rgb(239,132,9)" rx="2" ry="2" />
<text  x="808.07" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.07%)</title><rect x="10.0" y="213" width="0.8" height="15.0" fill="rgb(250,213,31)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>free (222,222,220 samples, 1.57%)</title><rect x="105.8" y="213" width="18.5" height="15.0" fill="rgb(249,105,12)" rx="2" ry="2" />
<text  x="108.81" y="223.5" ></text>
</g>
<g >
<title>default_idle_call (2,010,100,990 samples, 14.17%)</title><rect x="1021.1" y="117" width="167.2" height="15.0" fill="rgb(223,151,0)" rx="2" ry="2" />
<text  x="1024.07" y="127.5" >default_idle_call</text>
</g>
<g >
<title>__sched_text_start (10,101,010 samples, 0.07%)</title><rect x="1188.3" y="101" width="0.9" height="15.0" fill="rgb(253,61,39)" rx="2" ry="2" />
<text  x="1191.32" y="111.5" ></text>
</g>
<g >
<title>dirname (10,101,010 samples, 0.07%)</title><rect x="11.7" y="261" width="0.8" height="15.0" fill="rgb(234,229,42)" rx="2" ry="2" />
<text  x="14.68" y="271.5" ></text>
</g>
<g >
<title>do_dentry_open (10,101,010 samples, 0.07%)</title><rect x="10.0" y="53" width="0.8" height="15.0" fill="rgb(246,182,22)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>[libsupermalloc.so] (272,727,270 samples, 1.92%)</title><rect x="651.3" y="229" width="22.7" height="15.0" fill="rgb(210,74,54)" rx="2" ry="2" />
<text  x="654.27" y="239.5" >[..</text>
</g>
</g>
</svg>
