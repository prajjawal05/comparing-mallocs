<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>[espresso] (10,101,010 samples, 0.08%)</title><rect x="12.7" y="165" width="0.9" height="15.0" fill="rgb(244,199,44)" rx="2" ry="2" />
<text  x="15.72" y="175.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (40,404,040 samples, 0.31%)</title><rect x="580.9" y="181" width="3.7" height="15.0" fill="rgb(211,96,46)" rx="2" ry="2" />
<text  x="583.94" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (10,101,010 samples, 0.08%)</title><rect x="394.0" y="149" width="0.9" height="15.0" fill="rgb(206,46,20)" rx="2" ry="2" />
<text  x="396.95" y="159.5" ></text>
</g>
<g >
<title>cpu_startup_entry (5,222,222,170 samples, 39.77%)</title><rect x="602.7" y="165" width="469.3" height="15.0" fill="rgb(207,16,16)" rx="2" ry="2" />
<text  x="605.72" y="175.5" >cpu_startup_entry</text>
</g>
<g >
<title>TCMallocInternalMalloc (20,202,020 samples, 0.15%)</title><rect x="298.6" y="165" width="1.9" height="15.0" fill="rgb(231,154,41)" rx="2" ry="2" />
<text  x="301.65" y="175.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (20,202,020 samples, 0.15%)</title><rect x="364.9" y="165" width="1.8" height="15.0" fill="rgb(243,104,11)" rx="2" ry="2" />
<text  x="367.91" y="175.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (20,202,020 samples, 0.15%)</title><rect x="16.4" y="149" width="1.8" height="15.0" fill="rgb(214,124,17)" rx="2" ry="2" />
<text  x="19.35" y="159.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="14.5" y="133" width="0.9" height="15.0" fill="rgb(213,217,47)" rx="2" ry="2" />
<text  x="17.54" y="143.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (20,202,020 samples, 0.15%)</title><rect x="560.1" y="181" width="1.8" height="15.0" fill="rgb(225,201,7)" rx="2" ry="2" />
<text  x="563.06" y="191.5" ></text>
</g>
<g >
<title>sm_col_remove_element (20,202,020 samples, 0.15%)</title><rect x="394.9" y="181" width="1.8" height="15.0" fill="rgb(244,70,38)" rx="2" ry="2" />
<text  x="397.86" y="191.5" ></text>
</g>
<g >
<title>do_sm_minimum_cover (70,707,070 samples, 0.54%)</title><rect x="300.5" y="181" width="6.3" height="15.0" fill="rgb(227,78,20)" rx="2" ry="2" />
<text  x="303.46" y="191.5" ></text>
</g>
<g >
<title>[unknown] (2,969,696,940 samples, 22.62%)</title><rect x="12.7" y="181" width="266.9" height="15.0" fill="rgb(251,154,54)" rx="2" ry="2" />
<text  x="15.72" y="191.5" >[unknown]</text>
</g>
<g >
<title>sm_row_insert (20,202,020 samples, 0.15%)</title><rect x="236.0" y="165" width="1.8" height="15.0" fill="rgb(233,179,47)" rx="2" ry="2" />
<text  x="239.02" y="175.5" ></text>
</g>
<g >
<title>cofactor (414,141,410 samples, 3.15%)</title><rect x="417.6" y="197" width="37.2" height="15.0" fill="rgb(248,174,21)" rx="2" ry="2" />
<text  x="420.55" y="207.5" >cof..</text>
</g>
<g >
<title>d1_order (10,101,010 samples, 0.08%)</title><rect x="454.8" y="197" width="0.9" height="15.0" fill="rgb(248,5,31)" rx="2" ry="2" />
<text  x="457.77" y="207.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.08%)</title><rect x="600.9" y="197" width="0.9" height="15.0" fill="rgb(253,142,41)" rx="2" ry="2" />
<text  x="603.91" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (10,101,010 samples, 0.08%)</title><rect x="236.9" y="149" width="0.9" height="15.0" fill="rgb(250,11,5)" rx="2" ry="2" />
<text  x="239.92" y="159.5" ></text>
</g>
<g >
<title>sm_free (10,101,010 samples, 0.08%)</title><rect x="14.5" y="149" width="0.9" height="15.0" fill="rgb(232,164,41)" rx="2" ry="2" />
<text  x="17.54" y="159.5" ></text>
</g>
<g >
<title>cdist01 (10,101,010 samples, 0.08%)</title><rect x="283.2" y="181" width="0.9" height="15.0" fill="rgb(230,185,53)" rx="2" ry="2" />
<text  x="286.22" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Allocate&lt;&amp;tcmalloc::tcmalloc_internal::TCMallocPolicy&lt;tcmalloc::tcmalloc_internal::MallocOomPolicy, tcmalloc::tcmalloc_internal::MallocAlignPolicy, tcmalloc::tcmalloc_internal::AllocationAccessHotPolicy, tcmalloc::tcmalloc_internal::InvokeHooksPolicy, tcmalloc::tcmalloc_internal::NonSizeReturningPolicy, tcmalloc::tcmalloc_internal::LocalNumaPartitionPolicy&gt;::handle_oom&gt; (20,202,020 samples, 0.15%)</title><rect x="587.3" y="165" width="1.8" height="15.0" fill="rgb(222,32,45)" rx="2" ry="2" />
<text  x="590.29" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::central_freelist_internal::CentralFreeList&lt;tcmalloc::tcmalloc_internal::central_freelist_internal::StaticForwarder&gt;::InsertRange (50,505,050 samples, 0.38%)</title><rect x="410.3" y="117" width="4.5" height="15.0" fill="rgb(241,71,22)" rx="2" ry="2" />
<text  x="413.29" y="127.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="181" width="117.1" height="15.0" fill="rgb(217,39,21)" rx="2" ry="2" />
<text  x="1075.00" y="191.5" >x86_64_start_k..</text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (10,101,010 samples, 0.08%)</title><rect x="14.5" y="101" width="0.9" height="15.0" fill="rgb(231,165,53)" rx="2" ry="2" />
<text  x="17.54" y="111.5" ></text>
</g>
<g >
<title>[unknown] (20,202,020 samples, 0.15%)</title><rect x="13.6" y="165" width="1.8" height="15.0" fill="rgb(244,180,36)" rx="2" ry="2" />
<text  x="16.63" y="175.5" ></text>
</g>
<g >
<title>sm_col_alloc (20,202,020 samples, 0.15%)</title><rect x="560.1" y="197" width="1.8" height="15.0" fill="rgb(227,81,32)" rx="2" ry="2" />
<text  x="563.06" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (20,202,020 samples, 0.15%)</title><rect x="290.5" y="165" width="1.8" height="15.0" fill="rgb(206,224,26)" rx="2" ry="2" />
<text  x="293.48" y="175.5" ></text>
</g>
<g >
<title>__times (20,202,020 samples, 0.15%)</title><rect x="415.7" y="197" width="1.9" height="15.0" fill="rgb(226,213,27)" rx="2" ry="2" />
<text  x="418.74" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::central_freelist_internal::CentralFreeList&lt;tcmalloc::tcmalloc_internal::central_freelist_internal::StaticForwarder&gt;::InsertRange (10,101,010 samples, 0.08%)</title><rect x="569.1" y="133" width="0.9" height="15.0" fill="rgb(212,174,17)" rx="2" ry="2" />
<text  x="572.14" y="143.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (5,222,222,170 samples, 39.77%)</title><rect x="602.7" y="101" width="469.3" height="15.0" fill="rgb(228,93,9)" rx="2" ry="2" />
<text  x="605.72" y="111.5" >__cpuidle_text_start</text>
</g>
<g >
<title>feasibly_covered (30,303,030 samples, 0.23%)</title><rect x="345.8" y="181" width="2.8" height="15.0" fill="rgb(219,23,53)" rx="2" ry="2" />
<text  x="348.85" y="191.5" ></text>
</g>
<g >
<title>read_cube (10,101,010 samples, 0.08%)</title><rect x="362.2" y="181" width="0.9" height="15.0" fill="rgb(239,180,8)" rx="2" ry="2" />
<text  x="365.18" y="191.5" ></text>
</g>
<g >
<title>sm_insert (40,404,040 samples, 0.31%)</title><rect x="580.9" y="197" width="3.7" height="15.0" fill="rgb(228,92,36)" rx="2" ry="2" />
<text  x="583.94" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="297.7" y="165" width="0.9" height="15.0" fill="rgb(232,88,25)" rx="2" ry="2" />
<text  x="300.74" y="175.5" ></text>
</g>
<g >
<title>sm_minimum_cover (10,101,010 samples, 0.08%)</title><rect x="584.6" y="197" width="0.9" height="15.0" fill="rgb(206,18,0)" rx="2" ry="2" />
<text  x="587.57" y="207.5" ></text>
</g>
<g >
<title>arch_call_rest_init (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="133" width="117.1" height="15.0" fill="rgb(252,168,53)" rx="2" ry="2" />
<text  x="1075.00" y="143.5" >arch_call_rest..</text>
</g>
<g >
<title>time (10,101,010 samples, 0.08%)</title><rect x="1189.1" y="213" width="0.9" height="15.0" fill="rgb(246,199,51)" rx="2" ry="2" />
<text  x="1192.09" y="223.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="272.3" y="149" width="0.9" height="15.0" fill="rgb(238,144,32)" rx="2" ry="2" />
<text  x="275.32" y="159.5" ></text>
</g>
<g >
<title>sm_mincov (10,101,010 samples, 0.08%)</title><rect x="235.1" y="165" width="0.9" height="15.0" fill="rgb(213,117,27)" rx="2" ry="2" />
<text  x="238.11" y="175.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.08%)</title><rect x="10.0" y="197" width="0.9" height="15.0" fill="rgb(209,56,47)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>start_kernel (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="149" width="117.1" height="15.0" fill="rgb(207,58,25)" rx="2" ry="2" />
<text  x="1075.00" y="159.5" >start_kernel</text>
</g>
<g >
<title>TCMallocInternalMalloc (50,505,050 samples, 0.38%)</title><rect x="576.4" y="181" width="4.5" height="15.0" fill="rgb(209,156,13)" rx="2" ry="2" />
<text  x="579.40" y="191.5" ></text>
</g>
<g >
<title>select_feasible (10,101,010 samples, 0.08%)</title><rect x="537.4" y="197" width="0.9" height="15.0" fill="rgb(205,117,28)" rx="2" ry="2" />
<text  x="540.37" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (90,909,090 samples, 0.69%)</title><rect x="406.7" y="133" width="8.1" height="15.0" fill="rgb(226,67,26)" rx="2" ry="2" />
<text  x="409.66" y="143.5" ></text>
</g>
<g >
<title>ftautology (20,202,020 samples, 0.15%)</title><rect x="19.1" y="165" width="1.8" height="15.0" fill="rgb(229,212,10)" rx="2" ry="2" />
<text  x="22.08" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Refill (10,101,010 samples, 0.08%)</title><rect x="588.2" y="149" width="0.9" height="15.0" fill="rgb(232,84,46)" rx="2" ry="2" />
<text  x="591.20" y="159.5" ></text>
</g>
<g >
<title>set_clear (30,303,030 samples, 0.23%)</title><rect x="539.2" y="197" width="2.7" height="15.0" fill="rgb(247,91,28)" rx="2" ry="2" />
<text  x="542.18" y="207.5" ></text>
</g>
<g >
<title>set_dist (10,101,010 samples, 0.08%)</title><rect x="545.5" y="197" width="0.9" height="15.0" fill="rgb(237,98,22)" rx="2" ry="2" />
<text  x="548.54" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::central_freelist_internal::CentralFreeList&lt;tcmalloc::tcmalloc_internal::central_freelist_internal::StaticForwarder&gt;::InsertRange (10,101,010 samples, 0.08%)</title><rect x="14.5" y="85" width="0.9" height="15.0" fill="rgb(254,71,31)" rx="2" ry="2" />
<text  x="17.54" y="95.5" ></text>
</g>
<g >
<title>elim_lowering (333,333,330 samples, 2.54%)</title><rect x="306.8" y="181" width="30.0" height="15.0" fill="rgb(212,170,21)" rx="2" ry="2" />
<text  x="309.82" y="191.5" >el..</text>
</g>
<g >
<title>setp_equal (10,101,010 samples, 0.08%)</title><rect x="370.4" y="181" width="0.9" height="15.0" fill="rgb(241,144,36)" rx="2" ry="2" />
<text  x="373.35" y="191.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (121,212,120 samples, 0.92%)</title><rect x="403.9" y="165" width="10.9" height="15.0" fill="rgb(242,185,6)" rx="2" ry="2" />
<text  x="406.94" y="175.5" ></text>
</g>
<g >
<title>massive_count (1,989,898,970 samples, 15.15%)</title><rect x="45.4" y="165" width="178.8" height="15.0" fill="rgb(228,146,43)" rx="2" ry="2" />
<text  x="48.40" y="175.5" >massive_count</text>
</g>
<g >
<title>setp_disjoint (10,101,010 samples, 0.08%)</title><rect x="369.4" y="181" width="1.0" height="15.0" fill="rgb(216,129,43)" rx="2" ry="2" />
<text  x="372.45" y="191.5" ></text>
</g>
<g >
<title>full_row (262,626,260 samples, 2.00%)</title><rect x="20.9" y="165" width="23.6" height="15.0" fill="rgb(214,209,40)" rx="2" ry="2" />
<text  x="23.89" y="175.5" >f..</text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="13.6" y="133" width="0.9" height="15.0" fill="rgb(207,23,1)" rx="2" ry="2" />
<text  x="16.63" y="143.5" ></text>
</g>
<g >
<title>setup_BB_CC (161,616,160 samples, 1.23%)</title><rect x="371.3" y="181" width="14.5" height="15.0" fill="rgb(223,219,52)" rx="2" ry="2" />
<text  x="374.26" y="191.5" ></text>
</g>
<g >
<title>do_idle (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="85" width="117.1" height="15.0" fill="rgb(246,74,21)" rx="2" ry="2" />
<text  x="1075.00" y="95.5" >do_idle</text>
</g>
<g >
<title>mincov (70,707,070 samples, 0.54%)</title><rect x="354.0" y="181" width="6.4" height="15.0" fill="rgb(228,65,0)" rx="2" ry="2" />
<text  x="357.02" y="191.5" ></text>
</g>
<g >
<title>all (13,131,313,000 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(228,148,2)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::central_freelist_internal::CentralFreeList&lt;tcmalloc::tcmalloc_internal::central_freelist_internal::StaticForwarder&gt;::InsertRange (10,101,010 samples, 0.08%)</title><rect x="394.0" y="117" width="0.9" height="15.0" fill="rgb(222,141,8)" rx="2" ry="2" />
<text  x="396.95" y="127.5" ></text>
</g>
<g >
<title>compl_lift (10,101,010 samples, 0.08%)</title><rect x="285.0" y="181" width="0.9" height="15.0" fill="rgb(226,50,12)" rx="2" ry="2" />
<text  x="288.03" y="191.5" ></text>
</g>
<g >
<title>sm_delcol.part.0 (10,101,010 samples, 0.08%)</title><rect x="13.6" y="149" width="0.9" height="15.0" fill="rgb(217,132,50)" rx="2" ry="2" />
<text  x="16.63" y="159.5" ></text>
</g>
<g >
<title>mini_sort (10,101,010 samples, 0.08%)</title><rect x="360.4" y="181" width="0.9" height="15.0" fill="rgb(234,204,35)" rx="2" ry="2" />
<text  x="363.37" y="191.5" ></text>
</g>
<g >
<title>swapper (6,525,252,460 samples, 49.69%)</title><rect x="602.7" y="213" width="586.4" height="15.0" fill="rgb(245,13,14)" rx="2" ry="2" />
<text  x="605.72" y="223.5" >swapper</text>
</g>
<g >
<title>massive_count (393,939,390 samples, 3.00%)</title><rect x="455.7" y="197" width="35.4" height="15.0" fill="rgb(245,123,39)" rx="2" ry="2" />
<text  x="458.68" y="207.5" >ma..</text>
</g>
<g >
<title>default_idle_call (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="69" width="117.1" height="15.0" fill="rgb(243,124,0)" rx="2" ry="2" />
<text  x="1075.00" y="79.5" >default_idle_c..</text>
</g>
<g >
<title>complement (90,909,090 samples, 0.69%)</title><rect x="292.3" y="181" width="8.2" height="15.0" fill="rgb(224,6,7)" rx="2" ry="2" />
<text  x="295.29" y="191.5" ></text>
</g>
<g >
<title>compl_cube (10,101,010 samples, 0.08%)</title><rect x="284.1" y="181" width="0.9" height="15.0" fill="rgb(213,53,38)" rx="2" ry="2" />
<text  x="287.12" y="191.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="101" width="117.1" height="15.0" fill="rgb(206,156,34)" rx="2" ry="2" />
<text  x="1075.00" y="111.5" >cpu_startup_en..</text>
</g>
<g >
<title>sm_dup (121,212,120 samples, 0.92%)</title><rect x="570.0" y="197" width="10.9" height="15.0" fill="rgb(248,51,21)" rx="2" ry="2" />
<text  x="573.05" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (10,101,010 samples, 0.08%)</title><rect x="394.0" y="133" width="0.9" height="15.0" fill="rgb(244,162,7)" rx="2" ry="2" />
<text  x="396.95" y="143.5" ></text>
</g>
<g >
<title>sm_delrow.part.0 (40,404,040 samples, 0.31%)</title><rect x="396.7" y="181" width="3.6" height="15.0" fill="rgb(247,106,31)" rx="2" ry="2" />
<text  x="399.68" y="191.5" ></text>
</g>
<g >
<title>sm_row_dup (10,101,010 samples, 0.08%)</title><rect x="595.5" y="197" width="0.9" height="15.0" fill="rgb(240,24,22)" rx="2" ry="2" />
<text  x="598.46" y="207.5" ></text>
</g>
<g >
<title>default_idle_call (5,222,222,170 samples, 39.77%)</title><rect x="602.7" y="133" width="469.3" height="15.0" fill="rgb(231,228,54)" rx="2" ry="2" />
<text  x="605.72" y="143.5" >default_idle_call</text>
</g>
<g >
<title>sm_col_dominance (60,606,060 samples, 0.46%)</title><rect x="389.4" y="181" width="5.5" height="15.0" fill="rgb(250,161,38)" rx="2" ry="2" />
<text  x="392.42" y="191.5" ></text>
</g>
<g >
<title>[unknown] (4,484,848,440 samples, 34.15%)</title><rect x="12.7" y="197" width="403.0" height="15.0" fill="rgb(248,67,36)" rx="2" ry="2" />
<text  x="15.72" y="207.5" >[unknown]</text>
</g>
<g >
<title>redis-server (20,202,020 samples, 0.15%)</title><rect x="600.9" y="213" width="1.8" height="15.0" fill="rgb(221,103,8)" rx="2" ry="2" />
<text  x="603.91" y="223.5" ></text>
</g>
<g >
<title>epoll_wait (10,101,010 samples, 0.08%)</title><rect x="601.8" y="197" width="0.9" height="15.0" fill="rgb(242,182,19)" rx="2" ry="2" />
<text  x="604.82" y="207.5" ></text>
</g>
<g >
<title>[chronyd] (10,101,010 samples, 0.08%)</title><rect x="10.9" y="197" width="0.9" height="15.0" fill="rgb(249,191,46)" rx="2" ry="2" />
<text  x="13.91" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (10,101,010 samples, 0.08%)</title><rect x="278.7" y="149" width="0.9" height="15.0" fill="rgb(227,15,22)" rx="2" ry="2" />
<text  x="281.68" y="159.5" ></text>
</g>
<g >
<title>tcmalloc_internal_tls_fetch_pic (10,101,010 samples, 0.08%)</title><rect x="409.4" y="101" width="0.9" height="15.0" fill="rgb(252,132,10)" rx="2" ry="2" />
<text  x="412.38" y="111.5" ></text>
</g>
<g >
<title>tautology (70,707,070 samples, 0.54%)</title><rect x="273.2" y="165" width="6.4" height="15.0" fill="rgb(224,127,43)" rx="2" ry="2" />
<text  x="276.23" y="175.5" ></text>
</g>
<g >
<title>sf_free (10,101,010 samples, 0.08%)</title><rect x="559.2" y="197" width="0.9" height="15.0" fill="rgb(208,130,23)" rx="2" ry="2" />
<text  x="562.15" y="207.5" ></text>
</g>
<g >
<title>bench.sh (10,101,010 samples, 0.08%)</title><rect x="10.0" y="213" width="0.9" height="15.0" fill="rgb(245,26,25)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="559.2" y="181" width="0.9" height="15.0" fill="rgb(230,41,43)" rx="2" ry="2" />
<text  x="562.15" y="191.5" ></text>
</g>
<g >
<title>arch_cpu_idle (5,222,222,170 samples, 39.77%)</title><rect x="602.7" y="117" width="469.3" height="15.0" fill="rgb(220,81,32)" rx="2" ry="2" />
<text  x="605.72" y="127.5" >arch_cpu_idle</text>
</g>
<g >
<title>sm_row_intersects (10,101,010 samples, 0.08%)</title><rect x="237.8" y="165" width="0.9" height="15.0" fill="rgb(242,47,16)" rx="2" ry="2" />
<text  x="240.83" y="175.5" ></text>
</g>
<g >
<title>set_diff (40,404,040 samples, 0.31%)</title><rect x="541.9" y="197" width="3.6" height="15.0" fill="rgb(212,11,43)" rx="2" ry="2" />
<text  x="544.91" y="207.5" ></text>
</g>
<g >
<title>sm_row_free (151,515,150 samples, 1.15%)</title><rect x="401.2" y="181" width="13.6" height="15.0" fill="rgb(227,135,34)" rx="2" ry="2" />
<text  x="404.22" y="191.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="165" width="117.1" height="15.0" fill="rgb(228,103,24)" rx="2" ry="2" />
<text  x="1075.00" y="175.5" >x86_64_start_r..</text>
</g>
<g >
<title>chronyd (10,101,010 samples, 0.08%)</title><rect x="10.9" y="213" width="0.9" height="15.0" fill="rgb(235,161,45)" rx="2" ry="2" />
<text  x="13.91" y="223.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (6,525,252,460 samples, 49.69%)</title><rect x="602.7" y="197" width="586.4" height="15.0" fill="rgb(217,36,52)" rx="2" ry="2" />
<text  x="605.72" y="207.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>set_or (141,414,140 samples, 1.08%)</title><rect x="546.4" y="197" width="12.8" height="15.0" fill="rgb(225,201,29)" rx="2" ry="2" />
<text  x="549.45" y="207.5" ></text>
</g>
<g >
<title>complement (10,101,010 samples, 0.08%)</title><rect x="18.2" y="165" width="0.9" height="15.0" fill="rgb(228,162,43)" rx="2" ry="2" />
<text  x="21.17" y="175.5" ></text>
</g>
<g >
<title>sm_col_contains (10,101,010 samples, 0.08%)</title><rect x="561.9" y="197" width="0.9" height="15.0" fill="rgb(235,90,24)" rx="2" ry="2" />
<text  x="564.88" y="207.5" ></text>
</g>
<g >
<title>scofactor (464,646,460 samples, 3.54%)</title><rect x="495.6" y="197" width="41.8" height="15.0" fill="rgb(245,37,6)" rx="2" ry="2" />
<text  x="498.62" y="207.5" >sco..</text>
</g>
<g >
<title>TCMallocInternalMalloc (30,303,030 samples, 0.23%)</title><rect x="586.4" y="181" width="2.7" height="15.0" fill="rgb(209,8,23)" rx="2" ry="2" />
<text  x="589.38" y="191.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (111,111,110 samples, 0.85%)</title><rect x="527.4" y="181" width="10.0" height="15.0" fill="rgb(233,151,44)" rx="2" ry="2" />
<text  x="530.38" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (20,202,020 samples, 0.15%)</title><rect x="568.2" y="165" width="1.8" height="15.0" fill="rgb(224,168,47)" rx="2" ry="2" />
<text  x="571.23" y="175.5" ></text>
</g>
<g >
<title>sm_col_remove_element (10,101,010 samples, 0.08%)</title><rect x="563.7" y="197" width="0.9" height="15.0" fill="rgb(236,12,4)" rx="2" ry="2" />
<text  x="566.69" y="207.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (90,909,090 samples, 0.69%)</title><rect x="406.7" y="149" width="8.1" height="15.0" fill="rgb(229,98,53)" rx="2" ry="2" />
<text  x="409.66" y="159.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (20,202,020 samples, 0.15%)</title><rect x="589.1" y="181" width="1.8" height="15.0" fill="rgb(248,9,5)" rx="2" ry="2" />
<text  x="592.11" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (10,101,010 samples, 0.08%)</title><rect x="600.0" y="197" width="0.9" height="15.0" fill="rgb(237,145,41)" rx="2" ry="2" />
<text  x="603.00" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (20,202,020 samples, 0.15%)</title><rect x="493.8" y="181" width="1.8" height="15.0" fill="rgb(234,206,45)" rx="2" ry="2" />
<text  x="496.80" y="191.5" ></text>
</g>
<g >
<title>rest_init (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="117" width="117.1" height="15.0" fill="rgb(219,199,42)" rx="2" ry="2" />
<text  x="1075.00" y="127.5" >rest_init</text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="394.0" y="165" width="0.9" height="15.0" fill="rgb(218,24,27)" rx="2" ry="2" />
<text  x="396.95" y="175.5" ></text>
</g>
<g >
<title>start_secondary (5,222,222,170 samples, 39.77%)</title><rect x="602.7" y="181" width="469.3" height="15.0" fill="rgb(209,23,10)" rx="2" ry="2" />
<text  x="605.72" y="191.5" >start_secondary</text>
</g>
<g >
<title>taut_special_cases (363,636,360 samples, 2.77%)</title><rect x="240.6" y="165" width="32.6" height="15.0" fill="rgb(246,32,30)" rx="2" ry="2" />
<text  x="243.55" y="175.5" >ta..</text>
</g>
<g >
<title>set_clear (10,101,010 samples, 0.08%)</title><rect x="366.7" y="181" width="0.9" height="15.0" fill="rgb(226,151,1)" rx="2" ry="2" />
<text  x="369.72" y="191.5" ></text>
</g>
<g >
<title>sm_insert (10,101,010 samples, 0.08%)</title><rect x="400.3" y="181" width="0.9" height="15.0" fill="rgb(254,110,21)" rx="2" ry="2" />
<text  x="403.31" y="191.5" ></text>
</g>
<g >
<title>quote_string (10,101,010 samples, 0.08%)</title><rect x="10.0" y="181" width="0.9" height="15.0" fill="rgb(225,19,4)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>binate_split_select (40,404,040 samples, 0.31%)</title><rect x="279.6" y="181" width="3.6" height="15.0" fill="rgb(235,117,35)" rx="2" ry="2" />
<text  x="282.58" y="191.5" ></text>
</g>
<g >
<title>sm_row_alloc (50,505,050 samples, 0.38%)</title><rect x="586.4" y="197" width="4.5" height="15.0" fill="rgb(236,79,6)" rx="2" ry="2" />
<text  x="589.38" y="207.5" ></text>
</g>
<g >
<title>set_dist (20,202,020 samples, 0.15%)</title><rect x="367.6" y="181" width="1.8" height="15.0" fill="rgb(218,154,32)" rx="2" ry="2" />
<text  x="370.63" y="191.5" ></text>
</g>
<g >
<title>sccc (20,202,020 samples, 0.15%)</title><rect x="224.2" y="165" width="1.8" height="15.0" fill="rgb(240,12,5)" rx="2" ry="2" />
<text  x="227.22" y="175.5" ></text>
</g>
<g >
<title>unravel_range (40,404,040 samples, 0.31%)</title><rect x="596.4" y="197" width="3.6" height="15.0" fill="rgb(220,224,25)" rx="2" ry="2" />
<text  x="599.37" y="207.5" ></text>
</g>
<g >
<title>[libtcmalloc.so] (10,101,010 samples, 0.08%)</title><rect x="587.3" y="149" width="0.9" height="15.0" fill="rgb(227,102,1)" rx="2" ry="2" />
<text  x="590.29" y="159.5" ></text>
</g>
<g >
<title>python3 (10,101,010 samples, 0.08%)</title><rect x="600.0" y="213" width="0.9" height="15.0" fill="rgb(239,139,7)" rx="2" ry="2" />
<text  x="603.00" y="223.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (40,404,040 samples, 0.31%)</title><rect x="396.7" y="165" width="3.6" height="15.0" fill="rgb(230,84,49)" rx="2" ry="2" />
<text  x="399.68" y="175.5" ></text>
</g>
<g >
<title>read_cube (20,202,020 samples, 0.15%)</title><rect x="491.1" y="197" width="1.8" height="15.0" fill="rgb(242,93,47)" rx="2" ry="2" />
<text  x="494.08" y="207.5" ></text>
</g>
<g >
<title>set_or (30,303,030 samples, 0.23%)</title><rect x="226.0" y="165" width="2.8" height="15.0" fill="rgb(250,225,46)" rx="2" ry="2" />
<text  x="229.03" y="175.5" ></text>
</g>
<g >
<title>force_lower (60,606,060 samples, 0.46%)</title><rect x="348.6" y="181" width="5.4" height="15.0" fill="rgb(227,46,0)" rx="2" ry="2" />
<text  x="351.57" y="191.5" ></text>
</g>
<g >
<title>compl_merge (70,707,070 samples, 0.54%)</title><rect x="285.9" y="181" width="6.4" height="15.0" fill="rgb(223,169,35)" rx="2" ry="2" />
<text  x="288.94" y="191.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (40,404,040 samples, 0.31%)</title><rect x="275.0" y="149" width="3.7" height="15.0" fill="rgb(209,42,44)" rx="2" ry="2" />
<text  x="278.05" y="159.5" ></text>
</g>
<g >
<title>espresso (6,545,454,480 samples, 49.85%)</title><rect x="11.8" y="213" width="588.2" height="15.0" fill="rgb(210,221,53)" rx="2" ry="2" />
<text  x="14.82" y="223.5" >espresso</text>
</g>
<g >
<title>TcmallocSlab_Internal_PopBatch (10,101,010 samples, 0.08%)</title><rect x="409.4" y="117" width="0.9" height="15.0" fill="rgb(245,122,44)" rx="2" ry="2" />
<text  x="412.38" y="127.5" ></text>
</g>
<g >
<title>sm_row_dominance (30,303,030 samples, 0.23%)</title><rect x="592.7" y="197" width="2.8" height="15.0" fill="rgb(226,12,30)" rx="2" ry="2" />
<text  x="595.74" y="207.5" ></text>
</g>
<g >
<title>sm_col_contains (40,404,040 samples, 0.31%)</title><rect x="385.8" y="181" width="3.6" height="15.0" fill="rgb(249,84,37)" rx="2" ry="2" />
<text  x="388.78" y="191.5" ></text>
</g>
<g >
<title>sm_row_contains (20,202,020 samples, 0.15%)</title><rect x="590.9" y="197" width="1.8" height="15.0" fill="rgb(228,186,45)" rx="2" ry="2" />
<text  x="593.92" y="207.5" ></text>
</g>
<g >
<title>cofactor (30,303,030 samples, 0.23%)</title><rect x="15.4" y="165" width="2.8" height="15.0" fill="rgb(243,173,51)" rx="2" ry="2" />
<text  x="18.45" y="175.5" ></text>
</g>
<g >
<title>gimpel_reduce (10,101,010 samples, 0.08%)</title><rect x="44.5" y="165" width="0.9" height="15.0" fill="rgb(209,16,48)" rx="2" ry="2" />
<text  x="47.49" y="175.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="37" width="117.1" height="15.0" fill="rgb(246,50,49)" rx="2" ry="2" />
<text  x="1075.00" y="47.5" >__cpuidle_text..</text>
</g>
<g >
<title>[libjemalloc.so.2] (10,101,010 samples, 0.08%)</title><rect x="600.9" y="181" width="0.9" height="15.0" fill="rgb(236,20,32)" rx="2" ry="2" />
<text  x="603.91" y="191.5" ></text>
</g>
<g >
<title>sm_col_dominance (10,101,010 samples, 0.08%)</title><rect x="562.8" y="197" width="0.9" height="15.0" fill="rgb(244,159,8)" rx="2" ry="2" />
<text  x="565.78" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (10,101,010 samples, 0.08%)</title><rect x="11.8" y="197" width="0.9" height="15.0" fill="rgb(249,177,20)" rx="2" ry="2" />
<text  x="14.82" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="20.0" y="149" width="0.9" height="15.0" fill="rgb(248,25,46)" rx="2" ry="2" />
<text  x="22.98" y="159.5" ></text>
</g>
<g >
<title>setp_implies (70,707,070 samples, 0.54%)</title><rect x="228.8" y="165" width="6.3" height="15.0" fill="rgb(250,131,12)" rx="2" ry="2" />
<text  x="231.75" y="175.5" ></text>
</g>
<g >
<title>sm_delrow.part.0 (60,606,060 samples, 0.46%)</title><rect x="564.6" y="197" width="5.4" height="15.0" fill="rgb(219,148,46)" rx="2" ry="2" />
<text  x="567.60" y="207.5" ></text>
</g>
<g >
<title>do_idle (5,222,222,170 samples, 39.77%)</title><rect x="602.7" y="149" width="469.3" height="15.0" fill="rgb(215,131,28)" rx="2" ry="2" />
<text  x="605.72" y="159.5" >do_idle</text>
</g>
<g >
<title>mv_reduce (10,101,010 samples, 0.08%)</title><rect x="361.3" y="181" width="0.9" height="15.0" fill="rgb(219,8,53)" rx="2" ry="2" />
<text  x="364.28" y="191.5" ></text>
</g>
<g >
<title>_dl_addr (10,101,010 samples, 0.08%)</title><rect x="1189.1" y="197" width="0.9" height="15.0" fill="rgb(231,153,8)" rx="2" ry="2" />
<text  x="1192.09" y="207.5" ></text>
</g>
<g >
<title>unravel_range (10,101,010 samples, 0.08%)</title><rect x="414.8" y="181" width="0.9" height="15.0" fill="rgb(211,14,45)" rx="2" ry="2" />
<text  x="417.83" y="191.5" ></text>
</g>
<g >
<title>set_and (10,101,010 samples, 0.08%)</title><rect x="538.3" y="197" width="0.9" height="15.0" fill="rgb(216,14,8)" rx="2" ry="2" />
<text  x="541.28" y="207.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (30,303,030 samples, 0.23%)</title><rect x="567.3" y="181" width="2.7" height="15.0" fill="rgb(246,111,49)" rx="2" ry="2" />
<text  x="570.32" y="191.5" ></text>
</g>
<g >
<title>arch_cpu_idle (1,303,030,290 samples, 9.92%)</title><rect x="1072.0" y="53" width="117.1" height="15.0" fill="rgb(252,51,35)" rx="2" ry="2" />
<text  x="1075.00" y="63.5" >arch_cpu_idle</text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="225.1" y="149" width="0.9" height="15.0" fill="rgb(212,226,22)" rx="2" ry="2" />
<text  x="228.12" y="159.5" ></text>
</g>
<g >
<title>essen_parts (101,010,100 samples, 0.77%)</title><rect x="336.8" y="181" width="9.0" height="15.0" fill="rgb(227,89,34)" rx="2" ry="2" />
<text  x="339.77" y="191.5" ></text>
</g>
<g >
<title>solution_free (10,101,010 samples, 0.08%)</title><rect x="239.6" y="165" width="1.0" height="15.0" fill="rgb(210,126,41)" rx="2" ry="2" />
<text  x="242.65" y="175.5" ></text>
</g>
<g >
<title>sccc_special_cases (30,303,030 samples, 0.23%)</title><rect x="492.9" y="197" width="2.7" height="15.0" fill="rgb(246,225,46)" rx="2" ry="2" />
<text  x="495.89" y="207.5" ></text>
</g>
<g >
<title>sccc_special_cases (40,404,040 samples, 0.31%)</title><rect x="363.1" y="181" width="3.6" height="15.0" fill="rgb(234,60,36)" rx="2" ry="2" />
<text  x="366.09" y="191.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="594.6" y="181" width="0.9" height="15.0" fill="rgb(225,220,2)" rx="2" ry="2" />
<text  x="597.55" y="191.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Deallocate (10,101,010 samples, 0.08%)</title><rect x="14.5" y="117" width="0.9" height="15.0" fill="rgb(250,70,15)" rx="2" ry="2" />
<text  x="17.54" y="127.5" ></text>
</g>
<g >
<title>sm_resize (10,101,010 samples, 0.08%)</title><rect x="585.5" y="197" width="0.9" height="15.0" fill="rgb(209,124,11)" rx="2" ry="2" />
<text  x="588.48" y="207.5" ></text>
</g>
<g >
<title>solution_alloc (10,101,010 samples, 0.08%)</title><rect x="238.7" y="165" width="0.9" height="15.0" fill="rgb(252,225,44)" rx="2" ry="2" />
<text  x="241.74" y="175.5" ></text>
</g>
<g >
<title>tcmalloc::tcmalloc_internal::cpu_cache_internal::CpuCache&lt;tcmalloc::tcmalloc_internal::cpu_cache_internal::StaticForwarder&gt;::Overflow (20,202,020 samples, 0.15%)</title><rect x="568.2" y="149" width="1.8" height="15.0" fill="rgb(224,87,53)" rx="2" ry="2" />
<text  x="571.23" y="159.5" ></text>
</g>
<g >
<title>TCMallocInternalDeleteArrayAlignedNothrow (10,101,010 samples, 0.08%)</title><rect x="18.2" y="149" width="0.9" height="15.0" fill="rgb(205,27,39)" rx="2" ry="2" />
<text  x="21.17" y="159.5" ></text>
</g>
<g >
<title>TCMallocInternalMalloc (10,101,010 samples, 0.08%)</title><rect x="238.7" y="149" width="0.9" height="15.0" fill="rgb(226,182,52)" rx="2" ry="2" />
<text  x="241.74" y="159.5" ></text>
</g>
</g>
</svg>
